#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ajancy
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class Kimia_Ajancy : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAjancy(Ajancy instance);
    partial void UpdateAjancy(Ajancy instance);
    partial void DeleteAjancy(Ajancy instance);
    partial void InsertAjancyComplaint(AjancyComplaint instance);
    partial void UpdateAjancyComplaint(AjancyComplaint instance);
    partial void DeleteAjancyComplaint(AjancyComplaint instance);
    partial void InsertAjancyDriver(AjancyDriver instance);
    partial void UpdateAjancyDriver(AjancyDriver instance);
    partial void DeleteAjancyDriver(AjancyDriver instance);
    partial void InsertAjancyPartner(AjancyPartner instance);
    partial void UpdateAjancyPartner(AjancyPartner instance);
    partial void DeleteAjancyPartner(AjancyPartner instance);
    partial void InsertAjancyUtility(AjancyUtility instance);
    partial void UpdateAjancyUtility(AjancyUtility instance);
    partial void DeleteAjancyUtility(AjancyUtility instance);
    partial void InsertBlockedFuelCard(BlockedFuelCard instance);
    partial void UpdateBlockedFuelCard(BlockedFuelCard instance);
    partial void DeleteBlockedFuelCard(BlockedFuelCard instance);
    partial void InsertBusinessLicenseInitialPayment(BusinessLicenseInitialPayment instance);
    partial void UpdateBusinessLicenseInitialPayment(BusinessLicenseInitialPayment instance);
    partial void DeleteBusinessLicenseInitialPayment(BusinessLicenseInitialPayment instance);
    partial void InsertBusinessLicenseInquiry(BusinessLicenseInquiry instance);
    partial void UpdateBusinessLicenseInquiry(BusinessLicenseInquiry instance);
    partial void DeleteBusinessLicenseInquiry(BusinessLicenseInquiry instance);
    partial void InsertBusinessLicenseRevival(BusinessLicenseRevival instance);
    partial void UpdateBusinessLicenseRevival(BusinessLicenseRevival instance);
    partial void DeleteBusinessLicenseRevival(BusinessLicenseRevival instance);
    partial void InsertBusinessLicense(BusinessLicense instance);
    partial void UpdateBusinessLicense(BusinessLicense instance);
    partial void DeleteBusinessLicense(BusinessLicense instance);
    partial void InsertCarPlateNumber(CarPlateNumber instance);
    partial void UpdateCarPlateNumber(CarPlateNumber instance);
    partial void DeleteCarPlateNumber(CarPlateNumber instance);
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertCarType(CarType instance);
    partial void UpdateCarType(CarType instance);
    partial void DeleteCarType(CarType instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCNG_ConsumptionRequest(CNG_ConsumptionRequest instance);
    partial void UpdateCNG_ConsumptionRequest(CNG_ConsumptionRequest instance);
    partial void DeleteCNG_ConsumptionRequest(CNG_ConsumptionRequest instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertDiscardedFuelCard(DiscardedFuelCard instance);
    partial void UpdateDiscardedFuelCard(DiscardedFuelCard instance);
    partial void DeleteDiscardedFuelCard(DiscardedFuelCard instance);
    partial void InsertDoument(Doument instance);
    partial void UpdateDoument(Doument instance);
    partial void DeleteDoument(Doument instance);
    partial void InsertDriverCertificationCar(DriverCertificationCar instance);
    partial void UpdateDriverCertificationCar(DriverCertificationCar instance);
    partial void DeleteDriverCertificationCar(DriverCertificationCar instance);
    partial void InsertDriverCertificationInquiry(DriverCertificationInquiry instance);
    partial void UpdateDriverCertificationInquiry(DriverCertificationInquiry instance);
    partial void DeleteDriverCertificationInquiry(DriverCertificationInquiry instance);
    partial void InsertDriverCertificationRevival(DriverCertificationRevival instance);
    partial void UpdateDriverCertificationRevival(DriverCertificationRevival instance);
    partial void DeleteDriverCertificationRevival(DriverCertificationRevival instance);
    partial void InsertDriverCertification(DriverCertification instance);
    partial void UpdateDriverCertification(DriverCertification instance);
    partial void DeleteDriverCertification(DriverCertification instance);
    partial void InsertDriverEndMembershipRequest(DriverEndMembershipRequest instance);
    partial void UpdateDriverEndMembershipRequest(DriverEndMembershipRequest instance);
    partial void DeleteDriverEndMembershipRequest(DriverEndMembershipRequest instance);
    partial void InsertDriverInsuranceRequest(DriverInsuranceRequest instance);
    partial void UpdateDriverInsuranceRequest(DriverInsuranceRequest instance);
    partial void DeleteDriverInsuranceRequest(DriverInsuranceRequest instance);
    partial void InsertDrivingLicense(DrivingLicense instance);
    partial void UpdateDrivingLicense(DrivingLicense instance);
    partial void DeleteDrivingLicense(DrivingLicense instance);
    partial void InsertFormerBusiness(FormerBusiness instance);
    partial void UpdateFormerBusiness(FormerBusiness instance);
    partial void DeleteFormerBusiness(FormerBusiness instance);
    partial void InsertFuelCard(FuelCard instance);
    partial void UpdateFuelCard(FuelCard instance);
    partial void DeleteFuelCard(FuelCard instance);
    partial void InsertFuelCardSubstitution(FuelCardSubstitution instance);
    partial void UpdateFuelCardSubstitution(FuelCardSubstitution instance);
    partial void DeleteFuelCardSubstitution(FuelCardSubstitution instance);
    partial void InsertInsurance(Insurance instance);
    partial void UpdateInsurance(Insurance instance);
    partial void DeleteInsurance(Insurance instance);
    partial void InsertNewFuelCard(NewFuelCard instance);
    partial void UpdateNewFuelCard(NewFuelCard instance);
    partial void DeleteNewFuelCard(NewFuelCard instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPlateNumber(PlateNumber instance);
    partial void UpdatePlateNumber(PlateNumber instance);
    partial void DeletePlateNumber(PlateNumber instance);
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUsersInRole(UsersInRole instance);
    partial void UpdateUsersInRole(UsersInRole instance);
    partial void DeleteUsersInRole(UsersInRole instance);
    partial void InsertZonePlateNumber(ZonePlateNumber instance);
    partial void UpdateZonePlateNumber(ZonePlateNumber instance);
    partial void DeleteZonePlateNumber(ZonePlateNumber instance);
    #endregion
		
		public Kimia_Ajancy(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Kimia_Ajancy(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Kimia_Ajancy(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Kimia_Ajancy(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ajancy> Ajancies
		{
			get
			{
				return this.GetTable<Ajancy>();
			}
		}
		
		public System.Data.Linq.Table<AjancyComplaint> AjancyComplaints
		{
			get
			{
				return this.GetTable<AjancyComplaint>();
			}
		}
		
		public System.Data.Linq.Table<AjancyDriver> AjancyDrivers
		{
			get
			{
				return this.GetTable<AjancyDriver>();
			}
		}
		
		public System.Data.Linq.Table<AjancyPartner> AjancyPartners
		{
			get
			{
				return this.GetTable<AjancyPartner>();
			}
		}
		
		public System.Data.Linq.Table<AjancyUtility> AjancyUtilities
		{
			get
			{
				return this.GetTable<AjancyUtility>();
			}
		}
		
		public System.Data.Linq.Table<BlockedFuelCard> BlockedFuelCards
		{
			get
			{
				return this.GetTable<BlockedFuelCard>();
			}
		}
		
		public System.Data.Linq.Table<BusinessLicenseInitialPayment> BusinessLicenseInitialPayments
		{
			get
			{
				return this.GetTable<BusinessLicenseInitialPayment>();
			}
		}
		
		public System.Data.Linq.Table<BusinessLicenseInquiry> BusinessLicenseInquiries
		{
			get
			{
				return this.GetTable<BusinessLicenseInquiry>();
			}
		}
		
		public System.Data.Linq.Table<BusinessLicenseRevival> BusinessLicenseRevivals
		{
			get
			{
				return this.GetTable<BusinessLicenseRevival>();
			}
		}
		
		public System.Data.Linq.Table<BusinessLicense> BusinessLicenses
		{
			get
			{
				return this.GetTable<BusinessLicense>();
			}
		}
		
		public System.Data.Linq.Table<CarPlateNumber> CarPlateNumbers
		{
			get
			{
				return this.GetTable<CarPlateNumber>();
			}
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<CarType> CarTypes
		{
			get
			{
				return this.GetTable<CarType>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<CNG_ConsumptionRequest> CNG_ConsumptionRequests
		{
			get
			{
				return this.GetTable<CNG_ConsumptionRequest>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<DiscardedFuelCard> DiscardedFuelCards
		{
			get
			{
				return this.GetTable<DiscardedFuelCard>();
			}
		}
		
		public System.Data.Linq.Table<Doument> Douments
		{
			get
			{
				return this.GetTable<Doument>();
			}
		}
		
		public System.Data.Linq.Table<DriverCertificationCar> DriverCertificationCars
		{
			get
			{
				return this.GetTable<DriverCertificationCar>();
			}
		}
		
		public System.Data.Linq.Table<DriverCertificationInquiry> DriverCertificationInquiries
		{
			get
			{
				return this.GetTable<DriverCertificationInquiry>();
			}
		}
		
		public System.Data.Linq.Table<DriverCertificationRevival> DriverCertificationRevivals
		{
			get
			{
				return this.GetTable<DriverCertificationRevival>();
			}
		}
		
		public System.Data.Linq.Table<DriverCertification> DriverCertifications
		{
			get
			{
				return this.GetTable<DriverCertification>();
			}
		}
		
		public System.Data.Linq.Table<DriverEndMembershipRequest> DriverEndMembershipRequests
		{
			get
			{
				return this.GetTable<DriverEndMembershipRequest>();
			}
		}
		
		public System.Data.Linq.Table<DriverInsuranceRequest> DriverInsuranceRequests
		{
			get
			{
				return this.GetTable<DriverInsuranceRequest>();
			}
		}
		
		public System.Data.Linq.Table<DrivingLicense> DrivingLicenses
		{
			get
			{
				return this.GetTable<DrivingLicense>();
			}
		}
		
		public System.Data.Linq.Table<FormerBusiness> FormerBusinesses
		{
			get
			{
				return this.GetTable<FormerBusiness>();
			}
		}
		
		public System.Data.Linq.Table<FuelCard> FuelCards
		{
			get
			{
				return this.GetTable<FuelCard>();
			}
		}
		
		public System.Data.Linq.Table<FuelCardSubstitution> FuelCardSubstitutions
		{
			get
			{
				return this.GetTable<FuelCardSubstitution>();
			}
		}
		
		public System.Data.Linq.Table<Insurance> Insurances
		{
			get
			{
				return this.GetTable<Insurance>();
			}
		}
		
		public System.Data.Linq.Table<NewFuelCard> NewFuelCards
		{
			get
			{
				return this.GetTable<NewFuelCard>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PlateNumber> PlateNumbers
		{
			get
			{
				return this.GetTable<PlateNumber>();
			}
		}
		
		public System.Data.Linq.Table<Province> Provinces
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UsersInRole> UsersInRoles
		{
			get
			{
				return this.GetTable<UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<ZonePlateNumber> ZonePlateNumbers
		{
			get
			{
				return this.GetTable<ZonePlateNumber>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ajancies")]
	public partial class Ajancy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AjancyID;
		
		private byte _BusinessLicenseType;
		
		private byte _AjancyType;
		
		private string _AjancyName;
		
		private short _CityID;
		
		private System.Nullable<byte> _OfficePosition;
		
		private string _OfficeLevel;
		
		private string _OfficeSpace;
		
		private string _BalconySpace;
		
		private string _BalconyHeight;
		
		private string _ParkingSpace;
		
		private System.Nullable<bool> _ParkingState;
		
		private string _BusinessScope;
		
		private string _PoliceStation;
		
		private System.Nullable<byte> _Mayor;
		
		private string _Address;
		
		private string _PostalCode;
		
		private string _Phone;
		
		private string _RegisteredPelak;
		
		private string _BluePelak;
		
		private System.Nullable<byte> _EstateType;
		
		private System.Nullable<byte> _DocumentType;
		
		private string _PlaceOwner;
		
		private string _WaterBillSerial;
		
		private string _ElectricityBillSerial;
		
		private string _GasBillSerial;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<City> _City;
		
		private EntitySet<AjancyDriver> _AjancyDrivers;
		
		private EntitySet<AjancyPartner> _AjancyPartners;
		
		private EntitySet<AjancyUtility> _AjancyUtilities;
		
		private EntitySet<BusinessLicense> _BusinessLicenses;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Doument> _Douments;
		
		private EntityRef<FormerBusiness> _FormerBusiness;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAjancyIDChanging(int value);
    partial void OnAjancyIDChanged();
    partial void OnBusinessLicenseTypeChanging(byte value);
    partial void OnBusinessLicenseTypeChanged();
    partial void OnAjancyTypeChanging(byte value);
    partial void OnAjancyTypeChanged();
    partial void OnAjancyNameChanging(string value);
    partial void OnAjancyNameChanged();
    partial void OnCityIDChanging(short value);
    partial void OnCityIDChanged();
    partial void OnOfficePositionChanging(System.Nullable<byte> value);
    partial void OnOfficePositionChanged();
    partial void OnOfficeLevelChanging(string value);
    partial void OnOfficeLevelChanged();
    partial void OnOfficeSpaceChanging(string value);
    partial void OnOfficeSpaceChanged();
    partial void OnBalconySpaceChanging(string value);
    partial void OnBalconySpaceChanged();
    partial void OnBalconyHeightChanging(string value);
    partial void OnBalconyHeightChanged();
    partial void OnParkingSpaceChanging(string value);
    partial void OnParkingSpaceChanged();
    partial void OnParkingStateChanging(System.Nullable<bool> value);
    partial void OnParkingStateChanged();
    partial void OnBusinessScopeChanging(string value);
    partial void OnBusinessScopeChanged();
    partial void OnPoliceStationChanging(string value);
    partial void OnPoliceStationChanged();
    partial void OnMayorChanging(System.Nullable<byte> value);
    partial void OnMayorChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnRegisteredPelakChanging(string value);
    partial void OnRegisteredPelakChanged();
    partial void OnBluePelakChanging(string value);
    partial void OnBluePelakChanged();
    partial void OnEstateTypeChanging(System.Nullable<byte> value);
    partial void OnEstateTypeChanged();
    partial void OnDocumentTypeChanging(System.Nullable<byte> value);
    partial void OnDocumentTypeChanged();
    partial void OnPlaceOwnerChanging(string value);
    partial void OnPlaceOwnerChanged();
    partial void OnWaterBillSerialChanging(string value);
    partial void OnWaterBillSerialChanged();
    partial void OnElectricityBillSerialChanging(string value);
    partial void OnElectricityBillSerialChanged();
    partial void OnGasBillSerialChanging(string value);
    partial void OnGasBillSerialChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public Ajancy()
		{
			this._City = default(EntityRef<City>);
			this._AjancyDrivers = new EntitySet<AjancyDriver>(new Action<AjancyDriver>(this.attach_AjancyDrivers), new Action<AjancyDriver>(this.detach_AjancyDrivers));
			this._AjancyPartners = new EntitySet<AjancyPartner>(new Action<AjancyPartner>(this.attach_AjancyPartners), new Action<AjancyPartner>(this.detach_AjancyPartners));
			this._AjancyUtilities = new EntitySet<AjancyUtility>(new Action<AjancyUtility>(this.attach_AjancyUtilities), new Action<AjancyUtility>(this.detach_AjancyUtilities));
			this._BusinessLicenses = new EntitySet<BusinessLicense>(new Action<BusinessLicense>(this.attach_BusinessLicenses), new Action<BusinessLicense>(this.detach_BusinessLicenses));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Douments = new EntitySet<Doument>(new Action<Doument>(this.attach_Douments), new Action<Doument>(this.detach_Douments));
			this._FormerBusiness = default(EntityRef<FormerBusiness>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AjancyID
		{
			get
			{
				return this._AjancyID;
			}
			set
			{
				if ((this._AjancyID != value))
				{
					this.OnAjancyIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyID = value;
					this.SendPropertyChanged("AjancyID");
					this.OnAjancyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessLicenseType", DbType="TinyInt NOT NULL")]
		public byte BusinessLicenseType
		{
			get
			{
				return this._BusinessLicenseType;
			}
			set
			{
				if ((this._BusinessLicenseType != value))
				{
					this.OnBusinessLicenseTypeChanging(value);
					this.SendPropertyChanging();
					this._BusinessLicenseType = value;
					this.SendPropertyChanged("BusinessLicenseType");
					this.OnBusinessLicenseTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyType", DbType="TinyInt NOT NULL")]
		public byte AjancyType
		{
			get
			{
				return this._AjancyType;
			}
			set
			{
				if ((this._AjancyType != value))
				{
					this.OnAjancyTypeChanging(value);
					this.SendPropertyChanging();
					this._AjancyType = value;
					this.SendPropertyChanged("AjancyType");
					this.OnAjancyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyName", DbType="NVarChar(20)")]
		public string AjancyName
		{
			get
			{
				return this._AjancyName;
			}
			set
			{
				if ((this._AjancyName != value))
				{
					this.OnAjancyNameChanging(value);
					this.SendPropertyChanging();
					this._AjancyName = value;
					this.SendPropertyChanged("AjancyName");
					this.OnAjancyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="SmallInt NOT NULL")]
		public short CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficePosition", DbType="TinyInt")]
		public System.Nullable<byte> OfficePosition
		{
			get
			{
				return this._OfficePosition;
			}
			set
			{
				if ((this._OfficePosition != value))
				{
					this.OnOfficePositionChanging(value);
					this.SendPropertyChanging();
					this._OfficePosition = value;
					this.SendPropertyChanged("OfficePosition");
					this.OnOfficePositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeLevel", DbType="VarChar(2)")]
		public string OfficeLevel
		{
			get
			{
				return this._OfficeLevel;
			}
			set
			{
				if ((this._OfficeLevel != value))
				{
					this.OnOfficeLevelChanging(value);
					this.SendPropertyChanging();
					this._OfficeLevel = value;
					this.SendPropertyChanged("OfficeLevel");
					this.OnOfficeLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeSpace", DbType="VarChar(6)")]
		public string OfficeSpace
		{
			get
			{
				return this._OfficeSpace;
			}
			set
			{
				if ((this._OfficeSpace != value))
				{
					this.OnOfficeSpaceChanging(value);
					this.SendPropertyChanging();
					this._OfficeSpace = value;
					this.SendPropertyChanged("OfficeSpace");
					this.OnOfficeSpaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalconySpace", DbType="VarChar(6)")]
		public string BalconySpace
		{
			get
			{
				return this._BalconySpace;
			}
			set
			{
				if ((this._BalconySpace != value))
				{
					this.OnBalconySpaceChanging(value);
					this.SendPropertyChanging();
					this._BalconySpace = value;
					this.SendPropertyChanged("BalconySpace");
					this.OnBalconySpaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalconyHeight", DbType="VarChar(5)")]
		public string BalconyHeight
		{
			get
			{
				return this._BalconyHeight;
			}
			set
			{
				if ((this._BalconyHeight != value))
				{
					this.OnBalconyHeightChanging(value);
					this.SendPropertyChanging();
					this._BalconyHeight = value;
					this.SendPropertyChanged("BalconyHeight");
					this.OnBalconyHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParkingSpace", DbType="VarChar(6)")]
		public string ParkingSpace
		{
			get
			{
				return this._ParkingSpace;
			}
			set
			{
				if ((this._ParkingSpace != value))
				{
					this.OnParkingSpaceChanging(value);
					this.SendPropertyChanging();
					this._ParkingSpace = value;
					this.SendPropertyChanged("ParkingSpace");
					this.OnParkingSpaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParkingState", DbType="Bit")]
		public System.Nullable<bool> ParkingState
		{
			get
			{
				return this._ParkingState;
			}
			set
			{
				if ((this._ParkingState != value))
				{
					this.OnParkingStateChanging(value);
					this.SendPropertyChanging();
					this._ParkingState = value;
					this.SendPropertyChanged("ParkingState");
					this.OnParkingStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessScope", DbType="VarChar(5)")]
		public string BusinessScope
		{
			get
			{
				return this._BusinessScope;
			}
			set
			{
				if ((this._BusinessScope != value))
				{
					this.OnBusinessScopeChanging(value);
					this.SendPropertyChanging();
					this._BusinessScope = value;
					this.SendPropertyChanged("BusinessScope");
					this.OnBusinessScopeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PoliceStation", DbType="NVarChar(25)")]
		public string PoliceStation
		{
			get
			{
				return this._PoliceStation;
			}
			set
			{
				if ((this._PoliceStation != value))
				{
					this.OnPoliceStationChanging(value);
					this.SendPropertyChanging();
					this._PoliceStation = value;
					this.SendPropertyChanged("PoliceStation");
					this.OnPoliceStationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mayor", DbType="TinyInt")]
		public System.Nullable<byte> Mayor
		{
			get
			{
				return this._Mayor;
			}
			set
			{
				if ((this._Mayor != value))
				{
					this.OnMayorChanging(value);
					this.SendPropertyChanging();
					this._Mayor = value;
					this.SendPropertyChanged("Mayor");
					this.OnMayorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="VarChar(10)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(15)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisteredPelak", DbType="VarChar(10)")]
		public string RegisteredPelak
		{
			get
			{
				return this._RegisteredPelak;
			}
			set
			{
				if ((this._RegisteredPelak != value))
				{
					this.OnRegisteredPelakChanging(value);
					this.SendPropertyChanging();
					this._RegisteredPelak = value;
					this.SendPropertyChanged("RegisteredPelak");
					this.OnRegisteredPelakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BluePelak", DbType="VarChar(10)")]
		public string BluePelak
		{
			get
			{
				return this._BluePelak;
			}
			set
			{
				if ((this._BluePelak != value))
				{
					this.OnBluePelakChanging(value);
					this.SendPropertyChanging();
					this._BluePelak = value;
					this.SendPropertyChanged("BluePelak");
					this.OnBluePelakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstateType", DbType="TinyInt")]
		public System.Nullable<byte> EstateType
		{
			get
			{
				return this._EstateType;
			}
			set
			{
				if ((this._EstateType != value))
				{
					this.OnEstateTypeChanging(value);
					this.SendPropertyChanging();
					this._EstateType = value;
					this.SendPropertyChanged("EstateType");
					this.OnEstateTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentType", DbType="TinyInt")]
		public System.Nullable<byte> DocumentType
		{
			get
			{
				return this._DocumentType;
			}
			set
			{
				if ((this._DocumentType != value))
				{
					this.OnDocumentTypeChanging(value);
					this.SendPropertyChanging();
					this._DocumentType = value;
					this.SendPropertyChanged("DocumentType");
					this.OnDocumentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceOwner", DbType="NVarChar(50)")]
		public string PlaceOwner
		{
			get
			{
				return this._PlaceOwner;
			}
			set
			{
				if ((this._PlaceOwner != value))
				{
					this.OnPlaceOwnerChanging(value);
					this.SendPropertyChanging();
					this._PlaceOwner = value;
					this.SendPropertyChanged("PlaceOwner");
					this.OnPlaceOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaterBillSerial", DbType="VarChar(20)")]
		public string WaterBillSerial
		{
			get
			{
				return this._WaterBillSerial;
			}
			set
			{
				if ((this._WaterBillSerial != value))
				{
					this.OnWaterBillSerialChanging(value);
					this.SendPropertyChanging();
					this._WaterBillSerial = value;
					this.SendPropertyChanged("WaterBillSerial");
					this.OnWaterBillSerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricityBillSerial", DbType="VarChar(20)")]
		public string ElectricityBillSerial
		{
			get
			{
				return this._ElectricityBillSerial;
			}
			set
			{
				if ((this._ElectricityBillSerial != value))
				{
					this.OnElectricityBillSerialChanging(value);
					this.SendPropertyChanging();
					this._ElectricityBillSerial = value;
					this.SendPropertyChanged("ElectricityBillSerial");
					this.OnElectricityBillSerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GasBillSerial", DbType="VarChar(20)")]
		public string GasBillSerial
		{
			get
			{
				return this._GasBillSerial;
			}
			set
			{
				if ((this._GasBillSerial != value))
				{
					this.OnGasBillSerialChanging(value);
					this.SendPropertyChanging();
					this._GasBillSerial = value;
					this.SendPropertyChanged("GasBillSerial");
					this.OnGasBillSerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Ajancies_Cities", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Ajancies.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Ajancies.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(short);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyDrivers_Ajancies", Storage="_AjancyDrivers", ThisKey="AjancyID", OtherKey="AjancyID", DeleteRule="NO ACTION")]
		public EntitySet<AjancyDriver> AjancyDrivers
		{
			get
			{
				return this._AjancyDrivers;
			}
			set
			{
				this._AjancyDrivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyPartners_Ajancies", Storage="_AjancyPartners", ThisKey="AjancyID", OtherKey="AjancyID", DeleteRule="NO ACTION")]
		public EntitySet<AjancyPartner> AjancyPartners
		{
			get
			{
				return this._AjancyPartners;
			}
			set
			{
				this._AjancyPartners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyUtilities_Ajancies", Storage="_AjancyUtilities", ThisKey="AjancyID", OtherKey="AjancyID", DeleteRule="NO ACTION")]
		public EntitySet<AjancyUtility> AjancyUtilities
		{
			get
			{
				return this._AjancyUtilities;
			}
			set
			{
				this._AjancyUtilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_BusinessLicenses_Ajancies", Storage="_BusinessLicenses", ThisKey="AjancyID", OtherKey="AjancyID", DeleteRule="NO ACTION")]
		public EntitySet<BusinessLicense> BusinessLicenses
		{
			get
			{
				return this._BusinessLicenses;
			}
			set
			{
				this._BusinessLicenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Comments_Ajancies", Storage="_Comments", ThisKey="AjancyID", OtherKey="AjancyID", DeleteRule="NO ACTION")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Douments_Ajancies", Storage="_Douments", ThisKey="AjancyID", OtherKey="AjancyID", DeleteRule="NO ACTION")]
		public EntitySet<Doument> Douments
		{
			get
			{
				return this._Douments;
			}
			set
			{
				this._Douments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_FormerBusiness_Ajancies", Storage="_FormerBusiness", ThisKey="AjancyID", OtherKey="AjancyID", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public FormerBusiness FormerBusiness
		{
			get
			{
				return this._FormerBusiness.Entity;
			}
			set
			{
				FormerBusiness previousValue = this._FormerBusiness.Entity;
				if (((previousValue != value) 
							|| (this._FormerBusiness.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormerBusiness.Entity = null;
						previousValue.Ajancy = null;
					}
					this._FormerBusiness.Entity = value;
					if ((value != null))
					{
						value.Ajancy = this;
					}
					this.SendPropertyChanged("FormerBusiness");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AjancyDrivers(AjancyDriver entity)
		{
			this.SendPropertyChanging();
			entity.Ajancy = this;
		}
		
		private void detach_AjancyDrivers(AjancyDriver entity)
		{
			this.SendPropertyChanging();
			entity.Ajancy = null;
		}
		
		private void attach_AjancyPartners(AjancyPartner entity)
		{
			this.SendPropertyChanging();
			entity.Ajancy = this;
		}
		
		private void detach_AjancyPartners(AjancyPartner entity)
		{
			this.SendPropertyChanging();
			entity.Ajancy = null;
		}
		
		private void attach_AjancyUtilities(AjancyUtility entity)
		{
			this.SendPropertyChanging();
			entity.Ajancy = this;
		}
		
		private void detach_AjancyUtilities(AjancyUtility entity)
		{
			this.SendPropertyChanging();
			entity.Ajancy = null;
		}
		
		private void attach_BusinessLicenses(BusinessLicense entity)
		{
			this.SendPropertyChanging();
			entity.Ajancy = this;
		}
		
		private void detach_BusinessLicenses(BusinessLicense entity)
		{
			this.SendPropertyChanging();
			entity.Ajancy = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Ajancy = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Ajancy = null;
		}
		
		private void attach_Douments(Doument entity)
		{
			this.SendPropertyChanging();
			entity.Ajancy = this;
		}
		
		private void detach_Douments(Doument entity)
		{
			this.SendPropertyChanging();
			entity.Ajancy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AjancyComplaints")]
	public partial class AjancyComplaint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AjancyComplaintID;
		
		private int _AjancyDriverID;
		
		private short _RoleID;
		
		private string _Comment;
		
		private System.DateTime _SubmitDate;
		
		private string _Reply;
		
		private System.Nullable<System.DateTime> _ReplyDate;
		
		private EntityRef<AjancyDriver> _AjancyDriver;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAjancyComplaintIDChanging(int value);
    partial void OnAjancyComplaintIDChanged();
    partial void OnAjancyDriverIDChanging(int value);
    partial void OnAjancyDriverIDChanged();
    partial void OnRoleIDChanging(short value);
    partial void OnRoleIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnReplyChanging(string value);
    partial void OnReplyChanged();
    partial void OnReplyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReplyDateChanged();
    #endregion
		
		public AjancyComplaint()
		{
			this._AjancyDriver = default(EntityRef<AjancyDriver>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyComplaintID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AjancyComplaintID
		{
			get
			{
				return this._AjancyComplaintID;
			}
			set
			{
				if ((this._AjancyComplaintID != value))
				{
					this.OnAjancyComplaintIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyComplaintID = value;
					this.SendPropertyChanged("AjancyComplaintID");
					this.OnAjancyComplaintIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyDriverID", DbType="Int NOT NULL")]
		public int AjancyDriverID
		{
			get
			{
				return this._AjancyDriverID;
			}
			set
			{
				if ((this._AjancyDriverID != value))
				{
					if (this._AjancyDriver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAjancyDriverIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyDriverID = value;
					this.SendPropertyChanged("AjancyDriverID");
					this.OnAjancyDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="SmallInt NOT NULL")]
		public short RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="DateTime NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reply", DbType="NVarChar(200)")]
		public string Reply
		{
			get
			{
				return this._Reply;
			}
			set
			{
				if ((this._Reply != value))
				{
					this.OnReplyChanging(value);
					this.SendPropertyChanging();
					this._Reply = value;
					this.SendPropertyChanged("Reply");
					this.OnReplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReplyDate
		{
			get
			{
				return this._ReplyDate;
			}
			set
			{
				if ((this._ReplyDate != value))
				{
					this.OnReplyDateChanging(value);
					this.SendPropertyChanging();
					this._ReplyDate = value;
					this.SendPropertyChanged("ReplyDate");
					this.OnReplyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyComplaints_AjancyDrivers", Storage="_AjancyDriver", ThisKey="AjancyDriverID", OtherKey="AjancyDriverID", IsForeignKey=true)]
		public AjancyDriver AjancyDriver
		{
			get
			{
				return this._AjancyDriver.Entity;
			}
			set
			{
				AjancyDriver previousValue = this._AjancyDriver.Entity;
				if (((previousValue != value) 
							|| (this._AjancyDriver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AjancyDriver.Entity = null;
						previousValue.AjancyComplaints.Remove(this);
					}
					this._AjancyDriver.Entity = value;
					if ((value != null))
					{
						value.AjancyComplaints.Add(this);
						this._AjancyDriverID = value.AjancyDriverID;
					}
					else
					{
						this._AjancyDriverID = default(int);
					}
					this.SendPropertyChanged("AjancyDriver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyComplaints_Roles", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.AjancyComplaints.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.AjancyComplaints.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(short);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AjancyDrivers")]
	public partial class AjancyDriver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AjancyDriverID;
		
		private int _AjancyID;
		
		private int _DriverCertificationCarID;
		
		private System.DateTime _MembershipDate;
		
		private System.Nullable<System.DateTime> _LockOutDate;
		
		private EntitySet<AjancyComplaint> _AjancyComplaints;
		
		private EntityRef<Ajancy> _Ajancy;
		
		private EntityRef<DriverCertificationCar> _DriverCertificationCar;
		
		private EntitySet<CNG_ConsumptionRequest> _CNG_ConsumptionRequests;
		
		private EntitySet<DriverEndMembershipRequest> _DriverEndMembershipRequests;
		
		private EntitySet<DriverInsuranceRequest> _DriverInsuranceRequests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAjancyDriverIDChanging(int value);
    partial void OnAjancyDriverIDChanged();
    partial void OnAjancyIDChanging(int value);
    partial void OnAjancyIDChanged();
    partial void OnDriverCertificationCarIDChanging(int value);
    partial void OnDriverCertificationCarIDChanged();
    partial void OnMembershipDateChanging(System.DateTime value);
    partial void OnMembershipDateChanged();
    partial void OnLockOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLockOutDateChanged();
    #endregion
		
		public AjancyDriver()
		{
			this._AjancyComplaints = new EntitySet<AjancyComplaint>(new Action<AjancyComplaint>(this.attach_AjancyComplaints), new Action<AjancyComplaint>(this.detach_AjancyComplaints));
			this._Ajancy = default(EntityRef<Ajancy>);
			this._DriverCertificationCar = default(EntityRef<DriverCertificationCar>);
			this._CNG_ConsumptionRequests = new EntitySet<CNG_ConsumptionRequest>(new Action<CNG_ConsumptionRequest>(this.attach_CNG_ConsumptionRequests), new Action<CNG_ConsumptionRequest>(this.detach_CNG_ConsumptionRequests));
			this._DriverEndMembershipRequests = new EntitySet<DriverEndMembershipRequest>(new Action<DriverEndMembershipRequest>(this.attach_DriverEndMembershipRequests), new Action<DriverEndMembershipRequest>(this.detach_DriverEndMembershipRequests));
			this._DriverInsuranceRequests = new EntitySet<DriverInsuranceRequest>(new Action<DriverInsuranceRequest>(this.attach_DriverInsuranceRequests), new Action<DriverInsuranceRequest>(this.detach_DriverInsuranceRequests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyDriverID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AjancyDriverID
		{
			get
			{
				return this._AjancyDriverID;
			}
			set
			{
				if ((this._AjancyDriverID != value))
				{
					this.OnAjancyDriverIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyDriverID = value;
					this.SendPropertyChanged("AjancyDriverID");
					this.OnAjancyDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyID", DbType="Int NOT NULL")]
		public int AjancyID
		{
			get
			{
				return this._AjancyID;
			}
			set
			{
				if ((this._AjancyID != value))
				{
					if (this._Ajancy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAjancyIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyID = value;
					this.SendPropertyChanged("AjancyID");
					this.OnAjancyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverCertificationCarID", DbType="Int NOT NULL")]
		public int DriverCertificationCarID
		{
			get
			{
				return this._DriverCertificationCarID;
			}
			set
			{
				if ((this._DriverCertificationCarID != value))
				{
					if (this._DriverCertificationCar.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverCertificationCarIDChanging(value);
					this.SendPropertyChanging();
					this._DriverCertificationCarID = value;
					this.SendPropertyChanged("DriverCertificationCarID");
					this.OnDriverCertificationCarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembershipDate", DbType="Date NOT NULL")]
		public System.DateTime MembershipDate
		{
			get
			{
				return this._MembershipDate;
			}
			set
			{
				if ((this._MembershipDate != value))
				{
					this.OnMembershipDateChanging(value);
					this.SendPropertyChanging();
					this._MembershipDate = value;
					this.SendPropertyChanged("MembershipDate");
					this.OnMembershipDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutDate", DbType="Date")]
		public System.Nullable<System.DateTime> LockOutDate
		{
			get
			{
				return this._LockOutDate;
			}
			set
			{
				if ((this._LockOutDate != value))
				{
					this.OnLockOutDateChanging(value);
					this.SendPropertyChanging();
					this._LockOutDate = value;
					this.SendPropertyChanged("LockOutDate");
					this.OnLockOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyComplaints_AjancyDrivers", Storage="_AjancyComplaints", ThisKey="AjancyDriverID", OtherKey="AjancyDriverID", DeleteRule="NO ACTION")]
		public EntitySet<AjancyComplaint> AjancyComplaints
		{
			get
			{
				return this._AjancyComplaints;
			}
			set
			{
				this._AjancyComplaints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyDrivers_Ajancies", Storage="_Ajancy", ThisKey="AjancyID", OtherKey="AjancyID", IsForeignKey=true)]
		public Ajancy Ajancy
		{
			get
			{
				return this._Ajancy.Entity;
			}
			set
			{
				Ajancy previousValue = this._Ajancy.Entity;
				if (((previousValue != value) 
							|| (this._Ajancy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ajancy.Entity = null;
						previousValue.AjancyDrivers.Remove(this);
					}
					this._Ajancy.Entity = value;
					if ((value != null))
					{
						value.AjancyDrivers.Add(this);
						this._AjancyID = value.AjancyID;
					}
					else
					{
						this._AjancyID = default(int);
					}
					this.SendPropertyChanged("Ajancy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyDrivers_DriverCertificationCars", Storage="_DriverCertificationCar", ThisKey="DriverCertificationCarID", OtherKey="DriverCertificationCarID", IsForeignKey=true, DeleteOnNull=true)]
		public DriverCertificationCar DriverCertificationCar
		{
			get
			{
				return this._DriverCertificationCar.Entity;
			}
			set
			{
				DriverCertificationCar previousValue = this._DriverCertificationCar.Entity;
				if (((previousValue != value) 
							|| (this._DriverCertificationCar.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DriverCertificationCar.Entity = null;
						previousValue.AjancyDrivers.Remove(this);
					}
					this._DriverCertificationCar.Entity = value;
					if ((value != null))
					{
						value.AjancyDrivers.Add(this);
						this._DriverCertificationCarID = value.DriverCertificationCarID;
					}
					else
					{
						this._DriverCertificationCarID = default(int);
					}
					this.SendPropertyChanged("DriverCertificationCar");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CNG_ConsumptionRequests_AjancyDrivers", Storage="_CNG_ConsumptionRequests", ThisKey="AjancyDriverID", OtherKey="AjancyDriverID", DeleteRule="CASCADE")]
		public EntitySet<CNG_ConsumptionRequest> CNG_ConsumptionRequests
		{
			get
			{
				return this._CNG_ConsumptionRequests;
			}
			set
			{
				this._CNG_ConsumptionRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverEndMembershipRequests_AjancyDrivers", Storage="_DriverEndMembershipRequests", ThisKey="AjancyDriverID", OtherKey="AjancyDriverID", DeleteRule="CASCADE")]
		public EntitySet<DriverEndMembershipRequest> DriverEndMembershipRequests
		{
			get
			{
				return this._DriverEndMembershipRequests;
			}
			set
			{
				this._DriverEndMembershipRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverInsuranceRequests_AjancyDrivers", Storage="_DriverInsuranceRequests", ThisKey="AjancyDriverID", OtherKey="AjancyDriverID", DeleteRule="CASCADE")]
		public EntitySet<DriverInsuranceRequest> DriverInsuranceRequests
		{
			get
			{
				return this._DriverInsuranceRequests;
			}
			set
			{
				this._DriverInsuranceRequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AjancyComplaints(AjancyComplaint entity)
		{
			this.SendPropertyChanging();
			entity.AjancyDriver = this;
		}
		
		private void detach_AjancyComplaints(AjancyComplaint entity)
		{
			this.SendPropertyChanging();
			entity.AjancyDriver = null;
		}
		
		private void attach_CNG_ConsumptionRequests(CNG_ConsumptionRequest entity)
		{
			this.SendPropertyChanging();
			entity.AjancyDriver = this;
		}
		
		private void detach_CNG_ConsumptionRequests(CNG_ConsumptionRequest entity)
		{
			this.SendPropertyChanging();
			entity.AjancyDriver = null;
		}
		
		private void attach_DriverEndMembershipRequests(DriverEndMembershipRequest entity)
		{
			this.SendPropertyChanging();
			entity.AjancyDriver = this;
		}
		
		private void detach_DriverEndMembershipRequests(DriverEndMembershipRequest entity)
		{
			this.SendPropertyChanging();
			entity.AjancyDriver = null;
		}
		
		private void attach_DriverInsuranceRequests(DriverInsuranceRequest entity)
		{
			this.SendPropertyChanging();
			entity.AjancyDriver = this;
		}
		
		private void detach_DriverInsuranceRequests(DriverInsuranceRequest entity)
		{
			this.SendPropertyChanging();
			entity.AjancyDriver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AjancyPartners")]
	public partial class AjancyPartner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AjancyPartnerID;
		
		private int _UserRoleID;
		
		private System.Nullable<int> _AjancyID;
		
		private System.DateTime _SubmitDate;
		
		private System.Nullable<System.DateTime> _LockOutDate;
		
		private EntityRef<Ajancy> _Ajancy;
		
		private EntityRef<UsersInRole> _UsersInRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAjancyPartnerIDChanging(int value);
    partial void OnAjancyPartnerIDChanged();
    partial void OnUserRoleIDChanging(int value);
    partial void OnUserRoleIDChanged();
    partial void OnAjancyIDChanging(System.Nullable<int> value);
    partial void OnAjancyIDChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnLockOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLockOutDateChanged();
    #endregion
		
		public AjancyPartner()
		{
			this._Ajancy = default(EntityRef<Ajancy>);
			this._UsersInRole = default(EntityRef<UsersInRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyPartnerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AjancyPartnerID
		{
			get
			{
				return this._AjancyPartnerID;
			}
			set
			{
				if ((this._AjancyPartnerID != value))
				{
					this.OnAjancyPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyPartnerID = value;
					this.SendPropertyChanged("AjancyPartnerID");
					this.OnAjancyPartnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleID", DbType="Int NOT NULL")]
		public int UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					if (this._UsersInRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyID", DbType="Int")]
		public System.Nullable<int> AjancyID
		{
			get
			{
				return this._AjancyID;
			}
			set
			{
				if ((this._AjancyID != value))
				{
					if (this._Ajancy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAjancyIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyID = value;
					this.SendPropertyChanged("AjancyID");
					this.OnAjancyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockOutDate
		{
			get
			{
				return this._LockOutDate;
			}
			set
			{
				if ((this._LockOutDate != value))
				{
					this.OnLockOutDateChanging(value);
					this.SendPropertyChanging();
					this._LockOutDate = value;
					this.SendPropertyChanged("LockOutDate");
					this.OnLockOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyPartners_Ajancies", Storage="_Ajancy", ThisKey="AjancyID", OtherKey="AjancyID", IsForeignKey=true)]
		public Ajancy Ajancy
		{
			get
			{
				return this._Ajancy.Entity;
			}
			set
			{
				Ajancy previousValue = this._Ajancy.Entity;
				if (((previousValue != value) 
							|| (this._Ajancy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ajancy.Entity = null;
						previousValue.AjancyPartners.Remove(this);
					}
					this._Ajancy.Entity = value;
					if ((value != null))
					{
						value.AjancyPartners.Add(this);
						this._AjancyID = value.AjancyID;
					}
					else
					{
						this._AjancyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ajancy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyPartners_UsersInRoles", Storage="_UsersInRole", ThisKey="UserRoleID", OtherKey="UserRoleID", IsForeignKey=true)]
		public UsersInRole UsersInRole
		{
			get
			{
				return this._UsersInRole.Entity;
			}
			set
			{
				UsersInRole previousValue = this._UsersInRole.Entity;
				if (((previousValue != value) 
							|| (this._UsersInRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersInRole.Entity = null;
						previousValue.AjancyPartners.Remove(this);
					}
					this._UsersInRole.Entity = value;
					if ((value != null))
					{
						value.AjancyPartners.Add(this);
						this._UserRoleID = value.UserRoleID;
					}
					else
					{
						this._UserRoleID = default(int);
					}
					this.SendPropertyChanged("UsersInRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AjancyUtilities")]
	public partial class AjancyUtility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AjancyID;
		
		private byte _Utility;
		
		private EntityRef<Ajancy> _Ajancy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAjancyIDChanging(int value);
    partial void OnAjancyIDChanged();
    partial void OnUtilityChanging(byte value);
    partial void OnUtilityChanged();
    #endregion
		
		public AjancyUtility()
		{
			this._Ajancy = default(EntityRef<Ajancy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AjancyID
		{
			get
			{
				return this._AjancyID;
			}
			set
			{
				if ((this._AjancyID != value))
				{
					if (this._Ajancy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAjancyIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyID = value;
					this.SendPropertyChanged("AjancyID");
					this.OnAjancyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Utility", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Utility
		{
			get
			{
				return this._Utility;
			}
			set
			{
				if ((this._Utility != value))
				{
					this.OnUtilityChanging(value);
					this.SendPropertyChanging();
					this._Utility = value;
					this.SendPropertyChanged("Utility");
					this.OnUtilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyUtilities_Ajancies", Storage="_Ajancy", ThisKey="AjancyID", OtherKey="AjancyID", IsForeignKey=true)]
		public Ajancy Ajancy
		{
			get
			{
				return this._Ajancy.Entity;
			}
			set
			{
				Ajancy previousValue = this._Ajancy.Entity;
				if (((previousValue != value) 
							|| (this._Ajancy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ajancy.Entity = null;
						previousValue.AjancyUtilities.Remove(this);
					}
					this._Ajancy.Entity = value;
					if ((value != null))
					{
						value.AjancyUtilities.Add(this);
						this._AjancyID = value.AjancyID;
					}
					else
					{
						this._AjancyID = default(int);
					}
					this.SendPropertyChanged("Ajancy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlockedFuelCards")]
	public partial class BlockedFuelCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FuelCardID;
		
		private EntityRef<FuelCard> _FuelCard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFuelCardIDChanging(int value);
    partial void OnFuelCardIDChanged();
    #endregion
		
		public BlockedFuelCard()
		{
			this._FuelCard = default(EntityRef<FuelCard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelCardID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FuelCardID
		{
			get
			{
				return this._FuelCardID;
			}
			set
			{
				if ((this._FuelCardID != value))
				{
					if (this._FuelCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFuelCardIDChanging(value);
					this.SendPropertyChanging();
					this._FuelCardID = value;
					this.SendPropertyChanged("FuelCardID");
					this.OnFuelCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_BlockedFuelCards_FuelCards", Storage="_FuelCard", ThisKey="FuelCardID", OtherKey="FuelCardID", IsForeignKey=true, DeleteOnNull=true)]
		public FuelCard FuelCard
		{
			get
			{
				return this._FuelCard.Entity;
			}
			set
			{
				FuelCard previousValue = this._FuelCard.Entity;
				if (((previousValue != value) 
							|| (this._FuelCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FuelCard.Entity = null;
						previousValue.BlockedFuelCard = null;
					}
					this._FuelCard.Entity = value;
					if ((value != null))
					{
						value.BlockedFuelCard = this;
						this._FuelCardID = value.FuelCardID;
					}
					else
					{
						this._FuelCardID = default(int);
					}
					this.SendPropertyChanged("FuelCard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessLicenseInitialPayments")]
	public partial class BusinessLicenseInitialPayment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentID;
		
		private int _BusinessLicenseID;
		
		private byte _Type;
		
		private string _BillNumber;
		
		private int _Amount;
		
		private EntityRef<BusinessLicense> _BusinessLicense;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnBusinessLicenseIDChanging(int value);
    partial void OnBusinessLicenseIDChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnBillNumberChanging(string value);
    partial void OnBillNumberChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public BusinessLicenseInitialPayment()
		{
			this._BusinessLicense = default(EntityRef<BusinessLicense>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessLicenseID", DbType="Int NOT NULL")]
		public int BusinessLicenseID
		{
			get
			{
				return this._BusinessLicenseID;
			}
			set
			{
				if ((this._BusinessLicenseID != value))
				{
					if (this._BusinessLicense.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessLicenseID = value;
					this.SendPropertyChanged("BusinessLicenseID");
					this.OnBusinessLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string BillNumber
		{
			get
			{
				return this._BillNumber;
			}
			set
			{
				if ((this._BillNumber != value))
				{
					this.OnBillNumberChanging(value);
					this.SendPropertyChanging();
					this._BillNumber = value;
					this.SendPropertyChanged("BillNumber");
					this.OnBillNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_BusinessLicenseInitialPayments_BusinessLicenses", Storage="_BusinessLicense", ThisKey="BusinessLicenseID", OtherKey="BusinessLicenseID", IsForeignKey=true)]
		public BusinessLicense BusinessLicense
		{
			get
			{
				return this._BusinessLicense.Entity;
			}
			set
			{
				BusinessLicense previousValue = this._BusinessLicense.Entity;
				if (((previousValue != value) 
							|| (this._BusinessLicense.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessLicense.Entity = null;
						previousValue.BusinessLicenseInitialPayments.Remove(this);
					}
					this._BusinessLicense.Entity = value;
					if ((value != null))
					{
						value.BusinessLicenseInitialPayments.Add(this);
						this._BusinessLicenseID = value.BusinessLicenseID;
					}
					else
					{
						this._BusinessLicenseID = default(int);
					}
					this.SendPropertyChanged("BusinessLicense");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessLicenseInquiries")]
	public partial class BusinessLicenseInquiry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InquiryID;
		
		private int _BusinessLicenseID;
		
		private byte _Type;
		
		private string _SerialNumber;
		
		private System.DateTime _InquiryDate;
		
		private string _Comment;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<BusinessLicense> _BusinessLicense;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInquiryIDChanging(int value);
    partial void OnInquiryIDChanged();
    partial void OnBusinessLicenseIDChanging(int value);
    partial void OnBusinessLicenseIDChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnInquiryDateChanging(System.DateTime value);
    partial void OnInquiryDateChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public BusinessLicenseInquiry()
		{
			this._BusinessLicense = default(EntityRef<BusinessLicense>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InquiryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InquiryID
		{
			get
			{
				return this._InquiryID;
			}
			set
			{
				if ((this._InquiryID != value))
				{
					this.OnInquiryIDChanging(value);
					this.SendPropertyChanging();
					this._InquiryID = value;
					this.SendPropertyChanged("InquiryID");
					this.OnInquiryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessLicenseID", DbType="Int NOT NULL")]
		public int BusinessLicenseID
		{
			get
			{
				return this._BusinessLicenseID;
			}
			set
			{
				if ((this._BusinessLicenseID != value))
				{
					if (this._BusinessLicense.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessLicenseID = value;
					this.SendPropertyChanged("BusinessLicenseID");
					this.OnBusinessLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InquiryDate", DbType="Date NOT NULL")]
		public System.DateTime InquiryDate
		{
			get
			{
				return this._InquiryDate;
			}
			set
			{
				if ((this._InquiryDate != value))
				{
					this.OnInquiryDateChanging(value);
					this.SendPropertyChanging();
					this._InquiryDate = value;
					this.SendPropertyChanged("InquiryDate");
					this.OnInquiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(200)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_BusinessLicenseInquiries_BusinessLicenses", Storage="_BusinessLicense", ThisKey="BusinessLicenseID", OtherKey="BusinessLicenseID", IsForeignKey=true)]
		public BusinessLicense BusinessLicense
		{
			get
			{
				return this._BusinessLicense.Entity;
			}
			set
			{
				BusinessLicense previousValue = this._BusinessLicense.Entity;
				if (((previousValue != value) 
							|| (this._BusinessLicense.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessLicense.Entity = null;
						previousValue.BusinessLicenseInquiries.Remove(this);
					}
					this._BusinessLicense.Entity = value;
					if ((value != null))
					{
						value.BusinessLicenseInquiries.Add(this);
						this._BusinessLicenseID = value.BusinessLicenseID;
					}
					else
					{
						this._BusinessLicenseID = default(int);
					}
					this.SendPropertyChanged("BusinessLicense");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessLicenseRevivals")]
	public partial class BusinessLicenseRevival : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RevivalID;
		
		private int _BusinessLicenseID;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _AbonnementBillNo;
		
		private System.Nullable<int> _AbonnementAmount;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<BusinessLicense> _BusinessLicense;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRevivalIDChanging(int value);
    partial void OnRevivalIDChanged();
    partial void OnBusinessLicenseIDChanging(int value);
    partial void OnBusinessLicenseIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnAbonnementBillNoChanging(string value);
    partial void OnAbonnementBillNoChanged();
    partial void OnAbonnementAmountChanging(System.Nullable<int> value);
    partial void OnAbonnementAmountChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public BusinessLicenseRevival()
		{
			this._BusinessLicense = default(EntityRef<BusinessLicense>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevivalID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RevivalID
		{
			get
			{
				return this._RevivalID;
			}
			set
			{
				if ((this._RevivalID != value))
				{
					this.OnRevivalIDChanging(value);
					this.SendPropertyChanging();
					this._RevivalID = value;
					this.SendPropertyChanged("RevivalID");
					this.OnRevivalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessLicenseID", DbType="Int NOT NULL")]
		public int BusinessLicenseID
		{
			get
			{
				return this._BusinessLicenseID;
			}
			set
			{
				if ((this._BusinessLicenseID != value))
				{
					if (this._BusinessLicense.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessLicenseID = value;
					this.SendPropertyChanged("BusinessLicenseID");
					this.OnBusinessLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbonnementBillNo", DbType="VarChar(15)")]
		public string AbonnementBillNo
		{
			get
			{
				return this._AbonnementBillNo;
			}
			set
			{
				if ((this._AbonnementBillNo != value))
				{
					this.OnAbonnementBillNoChanging(value);
					this.SendPropertyChanging();
					this._AbonnementBillNo = value;
					this.SendPropertyChanged("AbonnementBillNo");
					this.OnAbonnementBillNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbonnementAmount", DbType="Int")]
		public System.Nullable<int> AbonnementAmount
		{
			get
			{
				return this._AbonnementAmount;
			}
			set
			{
				if ((this._AbonnementAmount != value))
				{
					this.OnAbonnementAmountChanging(value);
					this.SendPropertyChanging();
					this._AbonnementAmount = value;
					this.SendPropertyChanged("AbonnementAmount");
					this.OnAbonnementAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_BusinessLicenseRevivals_BusinessLicenses", Storage="_BusinessLicense", ThisKey="BusinessLicenseID", OtherKey="BusinessLicenseID", IsForeignKey=true)]
		public BusinessLicense BusinessLicense
		{
			get
			{
				return this._BusinessLicense.Entity;
			}
			set
			{
				BusinessLicense previousValue = this._BusinessLicense.Entity;
				if (((previousValue != value) 
							|| (this._BusinessLicense.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessLicense.Entity = null;
						previousValue.BusinessLicenseRevivals.Remove(this);
					}
					this._BusinessLicense.Entity = value;
					if ((value != null))
					{
						value.BusinessLicenseRevivals.Add(this);
						this._BusinessLicenseID = value.BusinessLicenseID;
					}
					else
					{
						this._BusinessLicenseID = default(int);
					}
					this.SendPropertyChanged("BusinessLicense");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessLicenses")]
	public partial class BusinessLicense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessLicenseID;
		
		private int _AjancyID;
		
		private string _BusinessLicenseNo;
		
		private string _MemberShipCode;
		
		private string _NationalCardBarCode;
		
		private string _SerialNo;
		
		private string _ISIC;
		
		private string _CategoryCode;
		
		private System.DateTime _SubmitDate;
		
		private System.Nullable<System.DateTime> _LockOutDate;
		
		private EntitySet<BusinessLicenseInitialPayment> _BusinessLicenseInitialPayments;
		
		private EntitySet<BusinessLicenseInquiry> _BusinessLicenseInquiries;
		
		private EntitySet<BusinessLicenseRevival> _BusinessLicenseRevivals;
		
		private EntityRef<Ajancy> _Ajancy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessLicenseIDChanging(int value);
    partial void OnBusinessLicenseIDChanged();
    partial void OnAjancyIDChanging(int value);
    partial void OnAjancyIDChanged();
    partial void OnBusinessLicenseNoChanging(string value);
    partial void OnBusinessLicenseNoChanged();
    partial void OnMemberShipCodeChanging(string value);
    partial void OnMemberShipCodeChanged();
    partial void OnNationalCardBarCodeChanging(string value);
    partial void OnNationalCardBarCodeChanged();
    partial void OnSerialNoChanging(string value);
    partial void OnSerialNoChanged();
    partial void OnISICChanging(string value);
    partial void OnISICChanged();
    partial void OnCategoryCodeChanging(string value);
    partial void OnCategoryCodeChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnLockOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLockOutDateChanged();
    #endregion
		
		public BusinessLicense()
		{
			this._BusinessLicenseInitialPayments = new EntitySet<BusinessLicenseInitialPayment>(new Action<BusinessLicenseInitialPayment>(this.attach_BusinessLicenseInitialPayments), new Action<BusinessLicenseInitialPayment>(this.detach_BusinessLicenseInitialPayments));
			this._BusinessLicenseInquiries = new EntitySet<BusinessLicenseInquiry>(new Action<BusinessLicenseInquiry>(this.attach_BusinessLicenseInquiries), new Action<BusinessLicenseInquiry>(this.detach_BusinessLicenseInquiries));
			this._BusinessLicenseRevivals = new EntitySet<BusinessLicenseRevival>(new Action<BusinessLicenseRevival>(this.attach_BusinessLicenseRevivals), new Action<BusinessLicenseRevival>(this.detach_BusinessLicenseRevivals));
			this._Ajancy = default(EntityRef<Ajancy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessLicenseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BusinessLicenseID
		{
			get
			{
				return this._BusinessLicenseID;
			}
			set
			{
				if ((this._BusinessLicenseID != value))
				{
					this.OnBusinessLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessLicenseID = value;
					this.SendPropertyChanged("BusinessLicenseID");
					this.OnBusinessLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyID", DbType="Int NOT NULL")]
		public int AjancyID
		{
			get
			{
				return this._AjancyID;
			}
			set
			{
				if ((this._AjancyID != value))
				{
					if (this._Ajancy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAjancyIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyID = value;
					this.SendPropertyChanged("AjancyID");
					this.OnAjancyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessLicenseNo", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string BusinessLicenseNo
		{
			get
			{
				return this._BusinessLicenseNo;
			}
			set
			{
				if ((this._BusinessLicenseNo != value))
				{
					this.OnBusinessLicenseNoChanging(value);
					this.SendPropertyChanging();
					this._BusinessLicenseNo = value;
					this.SendPropertyChanged("BusinessLicenseNo");
					this.OnBusinessLicenseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberShipCode", DbType="NVarChar(20)")]
		public string MemberShipCode
		{
			get
			{
				return this._MemberShipCode;
			}
			set
			{
				if ((this._MemberShipCode != value))
				{
					this.OnMemberShipCodeChanging(value);
					this.SendPropertyChanging();
					this._MemberShipCode = value;
					this.SendPropertyChanged("MemberShipCode");
					this.OnMemberShipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalCardBarCode", DbType="NVarChar(20)")]
		public string NationalCardBarCode
		{
			get
			{
				return this._NationalCardBarCode;
			}
			set
			{
				if ((this._NationalCardBarCode != value))
				{
					this.OnNationalCardBarCodeChanging(value);
					this.SendPropertyChanging();
					this._NationalCardBarCode = value;
					this.SendPropertyChanged("NationalCardBarCode");
					this.OnNationalCardBarCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNo", DbType="NVarChar(20)")]
		public string SerialNo
		{
			get
			{
				return this._SerialNo;
			}
			set
			{
				if ((this._SerialNo != value))
				{
					this.OnSerialNoChanging(value);
					this.SendPropertyChanging();
					this._SerialNo = value;
					this.SendPropertyChanged("SerialNo");
					this.OnSerialNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISIC", DbType="VarChar(20)")]
		public string ISIC
		{
			get
			{
				return this._ISIC;
			}
			set
			{
				if ((this._ISIC != value))
				{
					this.OnISICChanging(value);
					this.SendPropertyChanging();
					this._ISIC = value;
					this.SendPropertyChanged("ISIC");
					this.OnISICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryCode", DbType="NVarChar(20)")]
		public string CategoryCode
		{
			get
			{
				return this._CategoryCode;
			}
			set
			{
				if ((this._CategoryCode != value))
				{
					this.OnCategoryCodeChanging(value);
					this.SendPropertyChanging();
					this._CategoryCode = value;
					this.SendPropertyChanged("CategoryCode");
					this.OnCategoryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutDate", DbType="Date")]
		public System.Nullable<System.DateTime> LockOutDate
		{
			get
			{
				return this._LockOutDate;
			}
			set
			{
				if ((this._LockOutDate != value))
				{
					this.OnLockOutDateChanging(value);
					this.SendPropertyChanging();
					this._LockOutDate = value;
					this.SendPropertyChanged("LockOutDate");
					this.OnLockOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_BusinessLicenseInitialPayments_BusinessLicenses", Storage="_BusinessLicenseInitialPayments", ThisKey="BusinessLicenseID", OtherKey="BusinessLicenseID", DeleteRule="NO ACTION")]
		public EntitySet<BusinessLicenseInitialPayment> BusinessLicenseInitialPayments
		{
			get
			{
				return this._BusinessLicenseInitialPayments;
			}
			set
			{
				this._BusinessLicenseInitialPayments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_BusinessLicenseInquiries_BusinessLicenses", Storage="_BusinessLicenseInquiries", ThisKey="BusinessLicenseID", OtherKey="BusinessLicenseID", DeleteRule="NO ACTION")]
		public EntitySet<BusinessLicenseInquiry> BusinessLicenseInquiries
		{
			get
			{
				return this._BusinessLicenseInquiries;
			}
			set
			{
				this._BusinessLicenseInquiries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_BusinessLicenseRevivals_BusinessLicenses", Storage="_BusinessLicenseRevivals", ThisKey="BusinessLicenseID", OtherKey="BusinessLicenseID", DeleteRule="NO ACTION")]
		public EntitySet<BusinessLicenseRevival> BusinessLicenseRevivals
		{
			get
			{
				return this._BusinessLicenseRevivals;
			}
			set
			{
				this._BusinessLicenseRevivals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_BusinessLicenses_Ajancies", Storage="_Ajancy", ThisKey="AjancyID", OtherKey="AjancyID", IsForeignKey=true)]
		public Ajancy Ajancy
		{
			get
			{
				return this._Ajancy.Entity;
			}
			set
			{
				Ajancy previousValue = this._Ajancy.Entity;
				if (((previousValue != value) 
							|| (this._Ajancy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ajancy.Entity = null;
						previousValue.BusinessLicenses.Remove(this);
					}
					this._Ajancy.Entity = value;
					if ((value != null))
					{
						value.BusinessLicenses.Add(this);
						this._AjancyID = value.AjancyID;
					}
					else
					{
						this._AjancyID = default(int);
					}
					this.SendPropertyChanged("Ajancy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessLicenseInitialPayments(BusinessLicenseInitialPayment entity)
		{
			this.SendPropertyChanging();
			entity.BusinessLicense = this;
		}
		
		private void detach_BusinessLicenseInitialPayments(BusinessLicenseInitialPayment entity)
		{
			this.SendPropertyChanging();
			entity.BusinessLicense = null;
		}
		
		private void attach_BusinessLicenseInquiries(BusinessLicenseInquiry entity)
		{
			this.SendPropertyChanging();
			entity.BusinessLicense = this;
		}
		
		private void detach_BusinessLicenseInquiries(BusinessLicenseInquiry entity)
		{
			this.SendPropertyChanging();
			entity.BusinessLicense = null;
		}
		
		private void attach_BusinessLicenseRevivals(BusinessLicenseRevival entity)
		{
			this.SendPropertyChanging();
			entity.BusinessLicense = this;
		}
		
		private void detach_BusinessLicenseRevivals(BusinessLicenseRevival entity)
		{
			this.SendPropertyChanging();
			entity.BusinessLicense = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarPlateNumbers")]
	public partial class CarPlateNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CarPlateNumberID;
		
		private System.Nullable<int> _PlateNumberID;
		
		private System.Nullable<int> _ZonePlateNumberID;
		
		private int _CarID;
		
		private System.Nullable<int> _OwnerPersonID;
		
		private EntityRef<Car> _Car;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<PlateNumber> _PlateNumber;
		
		private EntityRef<ZonePlateNumber> _ZonePlateNumber;
		
		private EntitySet<DriverCertificationCar> _DriverCertificationCars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCarPlateNumberIDChanging(int value);
    partial void OnCarPlateNumberIDChanged();
    partial void OnPlateNumberIDChanging(System.Nullable<int> value);
    partial void OnPlateNumberIDChanged();
    partial void OnZonePlateNumberIDChanging(System.Nullable<int> value);
    partial void OnZonePlateNumberIDChanged();
    partial void OnCarIDChanging(int value);
    partial void OnCarIDChanged();
    partial void OnOwnerPersonIDChanging(System.Nullable<int> value);
    partial void OnOwnerPersonIDChanged();
    #endregion
		
		public CarPlateNumber()
		{
			this._Car = default(EntityRef<Car>);
			this._Person = default(EntityRef<Person>);
			this._PlateNumber = default(EntityRef<PlateNumber>);
			this._ZonePlateNumber = default(EntityRef<ZonePlateNumber>);
			this._DriverCertificationCars = new EntitySet<DriverCertificationCar>(new Action<DriverCertificationCar>(this.attach_DriverCertificationCars), new Action<DriverCertificationCar>(this.detach_DriverCertificationCars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarPlateNumberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CarPlateNumberID
		{
			get
			{
				return this._CarPlateNumberID;
			}
			set
			{
				if ((this._CarPlateNumberID != value))
				{
					this.OnCarPlateNumberIDChanging(value);
					this.SendPropertyChanging();
					this._CarPlateNumberID = value;
					this.SendPropertyChanged("CarPlateNumberID");
					this.OnCarPlateNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlateNumberID", DbType="Int")]
		public System.Nullable<int> PlateNumberID
		{
			get
			{
				return this._PlateNumberID;
			}
			set
			{
				if ((this._PlateNumberID != value))
				{
					if (this._PlateNumber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlateNumberIDChanging(value);
					this.SendPropertyChanging();
					this._PlateNumberID = value;
					this.SendPropertyChanged("PlateNumberID");
					this.OnPlateNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZonePlateNumberID", DbType="Int")]
		public System.Nullable<int> ZonePlateNumberID
		{
			get
			{
				return this._ZonePlateNumberID;
			}
			set
			{
				if ((this._ZonePlateNumberID != value))
				{
					if (this._ZonePlateNumber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZonePlateNumberIDChanging(value);
					this.SendPropertyChanging();
					this._ZonePlateNumberID = value;
					this.SendPropertyChanged("ZonePlateNumberID");
					this.OnZonePlateNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarID", DbType="Int NOT NULL")]
		public int CarID
		{
			get
			{
				return this._CarID;
			}
			set
			{
				if ((this._CarID != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarIDChanging(value);
					this.SendPropertyChanging();
					this._CarID = value;
					this.SendPropertyChanged("CarID");
					this.OnCarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPersonID", DbType="Int")]
		public System.Nullable<int> OwnerPersonID
		{
			get
			{
				return this._OwnerPersonID;
			}
			set
			{
				if ((this._OwnerPersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerPersonIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerPersonID = value;
					this.SendPropertyChanged("OwnerPersonID");
					this.OnOwnerPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CarPlateNumbers_Cars", Storage="_Car", ThisKey="CarID", OtherKey="CarID", IsForeignKey=true, DeleteOnNull=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.CarPlateNumbers.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.CarPlateNumbers.Add(this);
						this._CarID = value.CarID;
					}
					else
					{
						this._CarID = default(int);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CarPlateNumbers_Persons", Storage="_Person", ThisKey="OwnerPersonID", OtherKey="PersonID", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.CarPlateNumbers.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.CarPlateNumbers.Add(this);
						this._OwnerPersonID = value.PersonID;
					}
					else
					{
						this._OwnerPersonID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CarPlateNumbers_PlateNumbers", Storage="_PlateNumber", ThisKey="PlateNumberID", OtherKey="PlateNumberID", IsForeignKey=true)]
		public PlateNumber PlateNumber
		{
			get
			{
				return this._PlateNumber.Entity;
			}
			set
			{
				PlateNumber previousValue = this._PlateNumber.Entity;
				if (((previousValue != value) 
							|| (this._PlateNumber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlateNumber.Entity = null;
						previousValue.CarPlateNumbers.Remove(this);
					}
					this._PlateNumber.Entity = value;
					if ((value != null))
					{
						value.CarPlateNumbers.Add(this);
						this._PlateNumberID = value.PlateNumberID;
					}
					else
					{
						this._PlateNumberID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PlateNumber");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CarPlateNumbers_ZonePlateNumber", Storage="_ZonePlateNumber", ThisKey="ZonePlateNumberID", OtherKey="ZonePlateNumberID", IsForeignKey=true)]
		public ZonePlateNumber ZonePlateNumber
		{
			get
			{
				return this._ZonePlateNumber.Entity;
			}
			set
			{
				ZonePlateNumber previousValue = this._ZonePlateNumber.Entity;
				if (((previousValue != value) 
							|| (this._ZonePlateNumber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ZonePlateNumber.Entity = null;
						previousValue.CarPlateNumbers.Remove(this);
					}
					this._ZonePlateNumber.Entity = value;
					if ((value != null))
					{
						value.CarPlateNumbers.Add(this);
						this._ZonePlateNumberID = value.ZonePlateNumberID;
					}
					else
					{
						this._ZonePlateNumberID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ZonePlateNumber");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverCertificationCars_CarPlateNumbers", Storage="_DriverCertificationCars", ThisKey="CarPlateNumberID", OtherKey="CarPlateNumberID", DeleteRule="CASCADE")]
		public EntitySet<DriverCertificationCar> DriverCertificationCars
		{
			get
			{
				return this._DriverCertificationCars;
			}
			set
			{
				this._DriverCertificationCars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DriverCertificationCars(DriverCertificationCar entity)
		{
			this.SendPropertyChanging();
			entity.CarPlateNumber = this;
		}
		
		private void detach_DriverCertificationCars(DriverCertificationCar entity)
		{
			this.SendPropertyChanging();
			entity.CarPlateNumber = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CarID;
		
		private short _CarTypeID;
		
		private string _VIN;
		
		private string _Model;
		
		private string _Color;
		
		private string _EngineNo;
		
		private string _ChassisNo;
		
		private byte _FuelType;
		
		private System.Nullable<byte> _GASProvider;
		
		private EntitySet<CarPlateNumber> _CarPlateNumbers;
		
		private EntityRef<CarType> _CarType;
		
		private EntitySet<FuelCard> _FuelCards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCarIDChanging(int value);
    partial void OnCarIDChanged();
    partial void OnCarTypeIDChanging(short value);
    partial void OnCarTypeIDChanged();
    partial void OnVINChanging(string value);
    partial void OnVINChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnEngineNoChanging(string value);
    partial void OnEngineNoChanged();
    partial void OnChassisNoChanging(string value);
    partial void OnChassisNoChanged();
    partial void OnFuelTypeChanging(byte value);
    partial void OnFuelTypeChanged();
    partial void OnGASProviderChanging(System.Nullable<byte> value);
    partial void OnGASProviderChanged();
    #endregion
		
		public Car()
		{
			this._CarPlateNumbers = new EntitySet<CarPlateNumber>(new Action<CarPlateNumber>(this.attach_CarPlateNumbers), new Action<CarPlateNumber>(this.detach_CarPlateNumbers));
			this._CarType = default(EntityRef<CarType>);
			this._FuelCards = new EntitySet<FuelCard>(new Action<FuelCard>(this.attach_FuelCards), new Action<FuelCard>(this.detach_FuelCards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CarID
		{
			get
			{
				return this._CarID;
			}
			set
			{
				if ((this._CarID != value))
				{
					this.OnCarIDChanging(value);
					this.SendPropertyChanging();
					this._CarID = value;
					this.SendPropertyChanged("CarID");
					this.OnCarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarTypeID", DbType="SmallInt NOT NULL")]
		public short CarTypeID
		{
			get
			{
				return this._CarTypeID;
			}
			set
			{
				if ((this._CarTypeID != value))
				{
					if (this._CarType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CarTypeID = value;
					this.SendPropertyChanged("CarTypeID");
					this.OnCarTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIN", DbType="Char(17) NOT NULL", CanBeNull=false)]
		public string VIN
		{
			get
			{
				return this._VIN;
			}
			set
			{
				if ((this._VIN != value))
				{
					this.OnVINChanging(value);
					this.SendPropertyChanging();
					this._VIN = value;
					this.SendPropertyChanged("VIN");
					this.OnVINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="Char(4)")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(10)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_EngineNo", DbType = "VarChar(17)")]
		public string EngineNo
		{
			get
			{
				return this._EngineNo;
			}
			set
			{
				if ((this._EngineNo != value))
				{
					this.OnEngineNoChanging(value);
					this.SendPropertyChanging();
					this._EngineNo = value;
					this.SendPropertyChanged("EngineNo");
					this.OnEngineNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChassisNo", DbType="Char(18)")]
		public string ChassisNo
		{
			get
			{
				return this._ChassisNo;
			}
			set
			{
				if ((this._ChassisNo != value))
				{
					this.OnChassisNoChanging(value);
					this.SendPropertyChanging();
					this._ChassisNo = value;
					this.SendPropertyChanged("ChassisNo");
					this.OnChassisNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelType", DbType="TinyInt NOT NULL")]
		public byte FuelType
		{
			get
			{
				return this._FuelType;
			}
			set
			{
				if ((this._FuelType != value))
				{
					this.OnFuelTypeChanging(value);
					this.SendPropertyChanging();
					this._FuelType = value;
					this.SendPropertyChanged("FuelType");
					this.OnFuelTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GASProvider", DbType="TinyInt")]
		public System.Nullable<byte> GASProvider
		{
			get
			{
				return this._GASProvider;
			}
			set
			{
				if ((this._GASProvider != value))
				{
					this.OnGASProviderChanging(value);
					this.SendPropertyChanging();
					this._GASProvider = value;
					this.SendPropertyChanged("GASProvider");
					this.OnGASProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CarPlateNumbers_Cars", Storage="_CarPlateNumbers", ThisKey="CarID", OtherKey="CarID", DeleteRule="CASCADE")]
		public EntitySet<CarPlateNumber> CarPlateNumbers
		{
			get
			{
				return this._CarPlateNumbers;
			}
			set
			{
				this._CarPlateNumbers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Cars_CarTypes", Storage="_CarType", ThisKey="CarTypeID", OtherKey="CarTypeID", IsForeignKey=true)]
		public CarType CarType
		{
			get
			{
				return this._CarType.Entity;
			}
			set
			{
				CarType previousValue = this._CarType.Entity;
				if (((previousValue != value) 
							|| (this._CarType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarType.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarType.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarTypeID = value.CarTypeID;
					}
					else
					{
						this._CarTypeID = default(short);
					}
					this.SendPropertyChanged("CarType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_FuelCards_Cars", Storage="_FuelCards", ThisKey="CarID", OtherKey="CarID", DeleteRule="CASCADE")]
		public EntitySet<FuelCard> FuelCards
		{
			get
			{
				return this._FuelCards;
			}
			set
			{
				this._FuelCards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CarPlateNumbers(CarPlateNumber entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_CarPlateNumbers(CarPlateNumber entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
		
		private void attach_FuelCards(FuelCard entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_FuelCards(FuelCard entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarTypes")]
	public partial class CarType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CarTypeID;
		
		private string _TypeName;
		
		private string _Capacity;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCarTypeIDChanging(short value);
    partial void OnCarTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnCapacityChanging(string value);
    partial void OnCapacityChanged();
    #endregion
		
		public CarType()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarTypeID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short CarTypeID
		{
			get
			{
				return this._CarTypeID;
			}
			set
			{
				if ((this._CarTypeID != value))
				{
					this.OnCarTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CarTypeID = value;
					this.SendPropertyChanged("CarTypeID");
					this.OnCarTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Char(1) NOT NULL", CanBeNull=false)]
		public string Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Cars_CarTypes", Storage="_Cars", ThisKey="CarTypeID", OtherKey="CarTypeID", DeleteRule="NO ACTION")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarType = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CityID;
		
		private byte _ProvinceID;
		
		private string _Name;
		
		private EntitySet<Ajancy> _Ajancies;
		
		private EntityRef<Province> _Province;
		
		private EntitySet<User> _Users;
		
		private EntitySet<ZonePlateNumber> _ZonePlateNumbers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(short value);
    partial void OnCityIDChanged();
    partial void OnProvinceIDChanging(byte value);
    partial void OnProvinceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public City()
		{
			this._Ajancies = new EntitySet<Ajancy>(new Action<Ajancy>(this.attach_Ajancies), new Action<Ajancy>(this.detach_Ajancies));
			this._Province = default(EntityRef<Province>);
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._ZonePlateNumbers = new EntitySet<ZonePlateNumber>(new Action<ZonePlateNumber>(this.attach_ZonePlateNumbers), new Action<ZonePlateNumber>(this.detach_ZonePlateNumbers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="TinyInt NOT NULL")]
		public byte ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Ajancies_Cities", Storage="_Ajancies", ThisKey="CityID", OtherKey="CityID", DeleteRule="NO ACTION")]
		public EntitySet<Ajancy> Ajancies
		{
			get
			{
				return this._Ajancies;
			}
			set
			{
				this._Ajancies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Cities_Provinces", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(byte);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Users_Cities", Storage="_Users", ThisKey="CityID", OtherKey="CityID", DeleteRule="NO ACTION")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ZonePlateNumber_Cities", Storage="_ZonePlateNumbers", ThisKey="CityID", OtherKey="CityID", DeleteRule="NO ACTION")]
		public EntitySet<ZonePlateNumber> ZonePlateNumbers
		{
			get
			{
				return this._ZonePlateNumbers;
			}
			set
			{
				this._ZonePlateNumbers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ajancies(Ajancy entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Ajancies(Ajancy entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_ZonePlateNumbers(ZonePlateNumber entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_ZonePlateNumbers(ZonePlateNumber entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CNG_ConsumptionRequests")]
	public partial class CNG_ConsumptionRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private int _AjancyDriverID;
		
		private string _Comment;
		
		private System.DateTime _SubmitDate;
		
		private System.Nullable<System.DateTime> _VerificationDate;
		
		private EntityRef<AjancyDriver> _AjancyDriver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnAjancyDriverIDChanging(int value);
    partial void OnAjancyDriverIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnVerificationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVerificationDateChanged();
    #endregion
		
		public CNG_ConsumptionRequest()
		{
			this._AjancyDriver = default(EntityRef<AjancyDriver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyDriverID", DbType="Int NOT NULL")]
		public int AjancyDriverID
		{
			get
			{
				return this._AjancyDriverID;
			}
			set
			{
				if ((this._AjancyDriverID != value))
				{
					if (this._AjancyDriver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAjancyDriverIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyDriverID = value;
					this.SendPropertyChanged("AjancyDriverID");
					this.OnAjancyDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(200)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerificationDate", DbType="Date")]
		public System.Nullable<System.DateTime> VerificationDate
		{
			get
			{
				return this._VerificationDate;
			}
			set
			{
				if ((this._VerificationDate != value))
				{
					this.OnVerificationDateChanging(value);
					this.SendPropertyChanging();
					this._VerificationDate = value;
					this.SendPropertyChanged("VerificationDate");
					this.OnVerificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CNG_ConsumptionRequests_AjancyDrivers", Storage="_AjancyDriver", ThisKey="AjancyDriverID", OtherKey="AjancyDriverID", IsForeignKey=true, DeleteOnNull=true)]
		public AjancyDriver AjancyDriver
		{
			get
			{
				return this._AjancyDriver.Entity;
			}
			set
			{
				AjancyDriver previousValue = this._AjancyDriver.Entity;
				if (((previousValue != value) 
							|| (this._AjancyDriver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AjancyDriver.Entity = null;
						previousValue.CNG_ConsumptionRequests.Remove(this);
					}
					this._AjancyDriver.Entity = value;
					if ((value != null))
					{
						value.CNG_ConsumptionRequests.Add(this);
						this._AjancyDriverID = value.AjancyDriverID;
					}
					else
					{
						this._AjancyDriverID = default(int);
					}
					this.SendPropertyChanged("AjancyDriver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Phone;
		
		private string _Email;
		
		private int _AjancyID;
		
		private byte _Subject;
		
		private string _DriverCode;
		
		private string _DriverFirstName;
		
		private string _DriverLastName;
		
		private System.Nullable<int> _PlateNumberID;
		
		private System.DateTime _ProblemDate;
		
		private string _CommentText;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<Ajancy> _Ajancy;
		
		private EntityRef<PlateNumber> _PlateNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAjancyIDChanging(int value);
    partial void OnAjancyIDChanged();
    partial void OnSubjectChanging(byte value);
    partial void OnSubjectChanged();
    partial void OnDriverCodeChanging(string value);
    partial void OnDriverCodeChanged();
    partial void OnDriverFirstNameChanging(string value);
    partial void OnDriverFirstNameChanged();
    partial void OnDriverLastNameChanging(string value);
    partial void OnDriverLastNameChanged();
    partial void OnPlateNumberIDChanging(System.Nullable<int> value);
    partial void OnPlateNumberIDChanged();
    partial void OnProblemDateChanging(System.DateTime value);
    partial void OnProblemDateChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public Comment()
		{
			this._Ajancy = default(EntityRef<Ajancy>);
			this._PlateNumber = default(EntityRef<PlateNumber>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(25)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyID", DbType="Int NOT NULL")]
		public int AjancyID
		{
			get
			{
				return this._AjancyID;
			}
			set
			{
				if ((this._AjancyID != value))
				{
					if (this._Ajancy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAjancyIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyID = value;
					this.SendPropertyChanged("AjancyID");
					this.OnAjancyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="TinyInt NOT NULL")]
		public byte Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverCode", DbType="Char(5)")]
		public string DriverCode
		{
			get
			{
				return this._DriverCode;
			}
			set
			{
				if ((this._DriverCode != value))
				{
					this.OnDriverCodeChanging(value);
					this.SendPropertyChanging();
					this._DriverCode = value;
					this.SendPropertyChanged("DriverCode");
					this.OnDriverCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverFirstName", DbType="NVarChar(25)")]
		public string DriverFirstName
		{
			get
			{
				return this._DriverFirstName;
			}
			set
			{
				if ((this._DriverFirstName != value))
				{
					this.OnDriverFirstNameChanging(value);
					this.SendPropertyChanging();
					this._DriverFirstName = value;
					this.SendPropertyChanged("DriverFirstName");
					this.OnDriverFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverLastName", DbType="NVarChar(25)")]
		public string DriverLastName
		{
			get
			{
				return this._DriverLastName;
			}
			set
			{
				if ((this._DriverLastName != value))
				{
					this.OnDriverLastNameChanging(value);
					this.SendPropertyChanging();
					this._DriverLastName = value;
					this.SendPropertyChanged("DriverLastName");
					this.OnDriverLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlateNumberID", DbType="Int")]
		public System.Nullable<int> PlateNumberID
		{
			get
			{
				return this._PlateNumberID;
			}
			set
			{
				if ((this._PlateNumberID != value))
				{
					if (this._PlateNumber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlateNumberIDChanging(value);
					this.SendPropertyChanging();
					this._PlateNumberID = value;
					this.SendPropertyChanged("PlateNumberID");
					this.OnPlateNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProblemDate", DbType="DateTime NOT NULL")]
		public System.DateTime ProblemDate
		{
			get
			{
				return this._ProblemDate;
			}
			set
			{
				if ((this._ProblemDate != value))
				{
					this.OnProblemDateChanging(value);
					this.SendPropertyChanging();
					this._ProblemDate = value;
					this.SendPropertyChanged("ProblemDate");
					this.OnProblemDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentText", DbType="NVarChar(300)")]
		public string CommentText
		{
			get
			{
				return this._CommentText;
			}
			set
			{
				if ((this._CommentText != value))
				{
					this.OnCommentTextChanging(value);
					this.SendPropertyChanging();
					this._CommentText = value;
					this.SendPropertyChanged("CommentText");
					this.OnCommentTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="DateTime NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Comments_Ajancies", Storage="_Ajancy", ThisKey="AjancyID", OtherKey="AjancyID", IsForeignKey=true)]
		public Ajancy Ajancy
		{
			get
			{
				return this._Ajancy.Entity;
			}
			set
			{
				Ajancy previousValue = this._Ajancy.Entity;
				if (((previousValue != value) 
							|| (this._Ajancy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ajancy.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Ajancy.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._AjancyID = value.AjancyID;
					}
					else
					{
						this._AjancyID = default(int);
					}
					this.SendPropertyChanged("Ajancy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Comments_PlateNumbers", Storage="_PlateNumber", ThisKey="PlateNumberID", OtherKey="PlateNumberID", IsForeignKey=true)]
		public PlateNumber PlateNumber
		{
			get
			{
				return this._PlateNumber.Entity;
			}
			set
			{
				PlateNumber previousValue = this._PlateNumber.Entity;
				if (((previousValue != value) 
							|| (this._PlateNumber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlateNumber.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._PlateNumber.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._PlateNumberID = value.PlateNumberID;
					}
					else
					{
						this._PlateNumberID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PlateNumber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiscardedFuelCards")]
	public partial class DiscardedFuelCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PAN;
		
		private string _VIN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPANChanging(string value);
    partial void OnPANChanged();
    partial void OnVINChanging(string value);
    partial void OnVINChanged();
    #endregion
		
		public DiscardedFuelCard()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAN", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PAN
		{
			get
			{
				return this._PAN;
			}
			set
			{
				if ((this._PAN != value))
				{
					this.OnPANChanging(value);
					this.SendPropertyChanging();
					this._PAN = value;
					this.SendPropertyChanged("PAN");
					this.OnPANChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIN", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string VIN
		{
			get
			{
				return this._VIN;
			}
			set
			{
				if ((this._VIN != value))
				{
					this.OnVINChanging(value);
					this.SendPropertyChanging();
					this._VIN = value;
					this.SendPropertyChanged("VIN");
					this.OnVINChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Douments")]
	public partial class Doument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DoumentID;
		
		private int _PersonID;
		
		private byte _DocumentType;
		
		private System.Nullable<int> _AjancyID;
		
		private System.Data.Linq.Binary _Picture;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<Ajancy> _Ajancy;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoumentIDChanging(int value);
    partial void OnDoumentIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnDocumentTypeChanging(byte value);
    partial void OnDocumentTypeChanged();
    partial void OnAjancyIDChanging(System.Nullable<int> value);
    partial void OnAjancyIDChanged();
    partial void OnPictureChanging(System.Data.Linq.Binary value);
    partial void OnPictureChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public Doument()
		{
			this._Ajancy = default(EntityRef<Ajancy>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DoumentID
		{
			get
			{
				return this._DoumentID;
			}
			set
			{
				if ((this._DoumentID != value))
				{
					this.OnDoumentIDChanging(value);
					this.SendPropertyChanging();
					this._DoumentID = value;
					this.SendPropertyChanged("DoumentID");
					this.OnDoumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentType", DbType="TinyInt NOT NULL")]
		public byte DocumentType
		{
			get
			{
				return this._DocumentType;
			}
			set
			{
				if ((this._DocumentType != value))
				{
					this.OnDocumentTypeChanging(value);
					this.SendPropertyChanging();
					this._DocumentType = value;
					this.SendPropertyChanged("DocumentType");
					this.OnDocumentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyID", DbType="Int")]
		public System.Nullable<int> AjancyID
		{
			get
			{
				return this._AjancyID;
			}
			set
			{
				if ((this._AjancyID != value))
				{
					if (this._Ajancy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAjancyIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyID = value;
					this.SendPropertyChanged("AjancyID");
					this.OnAjancyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Douments_Ajancies", Storage="_Ajancy", ThisKey="AjancyID", OtherKey="AjancyID", IsForeignKey=true)]
		public Ajancy Ajancy
		{
			get
			{
				return this._Ajancy.Entity;
			}
			set
			{
				Ajancy previousValue = this._Ajancy.Entity;
				if (((previousValue != value) 
							|| (this._Ajancy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ajancy.Entity = null;
						previousValue.Douments.Remove(this);
					}
					this._Ajancy.Entity = value;
					if ((value != null))
					{
						value.Douments.Add(this);
						this._AjancyID = value.AjancyID;
					}
					else
					{
						this._AjancyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ajancy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Douments_Persons", Storage="_Person", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true, DeleteOnNull=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Douments.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Douments.Add(this);
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DriverCertificationCars")]
	public partial class DriverCertificationCar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DriverCertificationCarID;
		
		private int _DriverCertificationID;
		
		private int _CarPlateNumberID;
		
		private System.DateTime _SubmitDate;
		
		private System.Nullable<System.DateTime> _LockOutDate;
		
		private EntitySet<AjancyDriver> _AjancyDrivers;
		
		private EntityRef<CarPlateNumber> _CarPlateNumber;
		
		private EntityRef<DriverCertification> _DriverCertification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriverCertificationCarIDChanging(int value);
    partial void OnDriverCertificationCarIDChanged();
    partial void OnDriverCertificationIDChanging(int value);
    partial void OnDriverCertificationIDChanged();
    partial void OnCarPlateNumberIDChanging(int value);
    partial void OnCarPlateNumberIDChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnLockOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLockOutDateChanged();
    #endregion
		
		public DriverCertificationCar()
		{
			this._AjancyDrivers = new EntitySet<AjancyDriver>(new Action<AjancyDriver>(this.attach_AjancyDrivers), new Action<AjancyDriver>(this.detach_AjancyDrivers));
			this._CarPlateNumber = default(EntityRef<CarPlateNumber>);
			this._DriverCertification = default(EntityRef<DriverCertification>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverCertificationCarID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DriverCertificationCarID
		{
			get
			{
				return this._DriverCertificationCarID;
			}
			set
			{
				if ((this._DriverCertificationCarID != value))
				{
					this.OnDriverCertificationCarIDChanging(value);
					this.SendPropertyChanging();
					this._DriverCertificationCarID = value;
					this.SendPropertyChanged("DriverCertificationCarID");
					this.OnDriverCertificationCarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverCertificationID", DbType="Int NOT NULL")]
		public int DriverCertificationID
		{
			get
			{
				return this._DriverCertificationID;
			}
			set
			{
				if ((this._DriverCertificationID != value))
				{
					if (this._DriverCertification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverCertificationIDChanging(value);
					this.SendPropertyChanging();
					this._DriverCertificationID = value;
					this.SendPropertyChanged("DriverCertificationID");
					this.OnDriverCertificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarPlateNumberID", DbType="Int NOT NULL")]
		public int CarPlateNumberID
		{
			get
			{
				return this._CarPlateNumberID;
			}
			set
			{
				if ((this._CarPlateNumberID != value))
				{
					if (this._CarPlateNumber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarPlateNumberIDChanging(value);
					this.SendPropertyChanging();
					this._CarPlateNumberID = value;
					this.SendPropertyChanged("CarPlateNumberID");
					this.OnCarPlateNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutDate", DbType="Date")]
		public System.Nullable<System.DateTime> LockOutDate
		{
			get
			{
				return this._LockOutDate;
			}
			set
			{
				if ((this._LockOutDate != value))
				{
					this.OnLockOutDateChanging(value);
					this.SendPropertyChanging();
					this._LockOutDate = value;
					this.SendPropertyChanged("LockOutDate");
					this.OnLockOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyDrivers_DriverCertificationCars", Storage="_AjancyDrivers", ThisKey="DriverCertificationCarID", OtherKey="DriverCertificationCarID", DeleteRule="CASCADE")]
		public EntitySet<AjancyDriver> AjancyDrivers
		{
			get
			{
				return this._AjancyDrivers;
			}
			set
			{
				this._AjancyDrivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverCertificationCars_CarPlateNumbers", Storage="_CarPlateNumber", ThisKey="CarPlateNumberID", OtherKey="CarPlateNumberID", IsForeignKey=true, DeleteOnNull=true)]
		public CarPlateNumber CarPlateNumber
		{
			get
			{
				return this._CarPlateNumber.Entity;
			}
			set
			{
				CarPlateNumber previousValue = this._CarPlateNumber.Entity;
				if (((previousValue != value) 
							|| (this._CarPlateNumber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarPlateNumber.Entity = null;
						previousValue.DriverCertificationCars.Remove(this);
					}
					this._CarPlateNumber.Entity = value;
					if ((value != null))
					{
						value.DriverCertificationCars.Add(this);
						this._CarPlateNumberID = value.CarPlateNumberID;
					}
					else
					{
						this._CarPlateNumberID = default(int);
					}
					this.SendPropertyChanged("CarPlateNumber");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverCertificationCars_DriverCertifications", Storage="_DriverCertification", ThisKey="DriverCertificationID", OtherKey="DriverCertificationID", IsForeignKey=true, DeleteOnNull=true)]
		public DriverCertification DriverCertification
		{
			get
			{
				return this._DriverCertification.Entity;
			}
			set
			{
				DriverCertification previousValue = this._DriverCertification.Entity;
				if (((previousValue != value) 
							|| (this._DriverCertification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DriverCertification.Entity = null;
						previousValue.DriverCertificationCars.Remove(this);
					}
					this._DriverCertification.Entity = value;
					if ((value != null))
					{
						value.DriverCertificationCars.Add(this);
						this._DriverCertificationID = value.DriverCertificationID;
					}
					else
					{
						this._DriverCertificationID = default(int);
					}
					this.SendPropertyChanged("DriverCertification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AjancyDrivers(AjancyDriver entity)
		{
			this.SendPropertyChanging();
			entity.DriverCertificationCar = this;
		}
		
		private void detach_AjancyDrivers(AjancyDriver entity)
		{
			this.SendPropertyChanging();
			entity.DriverCertificationCar = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DriverCertificationInquiries")]
	public partial class DriverCertificationInquiry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InquiryID;
		
		private int _DriverCertificationID;
		
		private byte _Type;
		
		private string _SerialNumber;
		
		private System.DateTime _InquiryDate;
		
		private string _Comment;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<DriverCertification> _DriverCertification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInquiryIDChanging(int value);
    partial void OnInquiryIDChanged();
    partial void OnDriverCertificationIDChanging(int value);
    partial void OnDriverCertificationIDChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnSerialNumberChanging(string value);
    partial void OnSerialNumberChanged();
    partial void OnInquiryDateChanging(System.DateTime value);
    partial void OnInquiryDateChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public DriverCertificationInquiry()
		{
			this._DriverCertification = default(EntityRef<DriverCertification>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InquiryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InquiryID
		{
			get
			{
				return this._InquiryID;
			}
			set
			{
				if ((this._InquiryID != value))
				{
					this.OnInquiryIDChanging(value);
					this.SendPropertyChanging();
					this._InquiryID = value;
					this.SendPropertyChanged("InquiryID");
					this.OnInquiryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverCertificationID", DbType="Int NOT NULL")]
		public int DriverCertificationID
		{
			get
			{
				return this._DriverCertificationID;
			}
			set
			{
				if ((this._DriverCertificationID != value))
				{
					if (this._DriverCertification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverCertificationIDChanging(value);
					this.SendPropertyChanging();
					this._DriverCertificationID = value;
					this.SendPropertyChanged("DriverCertificationID");
					this.OnDriverCertificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InquiryDate", DbType="Date NOT NULL")]
		public System.DateTime InquiryDate
		{
			get
			{
				return this._InquiryDate;
			}
			set
			{
				if ((this._InquiryDate != value))
				{
					this.OnInquiryDateChanging(value);
					this.SendPropertyChanging();
					this._InquiryDate = value;
					this.SendPropertyChanged("InquiryDate");
					this.OnInquiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(200)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverCertificationInquiries_DriverCertifications", Storage="_DriverCertification", ThisKey="DriverCertificationID", OtherKey="DriverCertificationID", IsForeignKey=true, DeleteOnNull=true)]
		public DriverCertification DriverCertification
		{
			get
			{
				return this._DriverCertification.Entity;
			}
			set
			{
				DriverCertification previousValue = this._DriverCertification.Entity;
				if (((previousValue != value) 
							|| (this._DriverCertification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DriverCertification.Entity = null;
						previousValue.DriverCertificationInquiries.Remove(this);
					}
					this._DriverCertification.Entity = value;
					if ((value != null))
					{
						value.DriverCertificationInquiries.Add(this);
						this._DriverCertificationID = value.DriverCertificationID;
					}
					else
					{
						this._DriverCertificationID = default(int);
					}
					this.SendPropertyChanged("DriverCertification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DriverCertificationRevivals")]
	public partial class DriverCertificationRevival : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RevivalID;
		
		private int _DriverCertificationID;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _AbonnementAmount;
		
		private string _AbonnementBillNo;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<DriverCertification> _DriverCertification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRevivalIDChanging(int value);
    partial void OnRevivalIDChanged();
    partial void OnDriverCertificationIDChanging(int value);
    partial void OnDriverCertificationIDChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnAbonnementAmountChanging(System.Nullable<int> value);
    partial void OnAbonnementAmountChanged();
    partial void OnAbonnementBillNoChanging(string value);
    partial void OnAbonnementBillNoChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public DriverCertificationRevival()
		{
			this._DriverCertification = default(EntityRef<DriverCertification>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevivalID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RevivalID
		{
			get
			{
				return this._RevivalID;
			}
			set
			{
				if ((this._RevivalID != value))
				{
					this.OnRevivalIDChanging(value);
					this.SendPropertyChanging();
					this._RevivalID = value;
					this.SendPropertyChanged("RevivalID");
					this.OnRevivalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverCertificationID", DbType="Int NOT NULL")]
		public int DriverCertificationID
		{
			get
			{
				return this._DriverCertificationID;
			}
			set
			{
				if ((this._DriverCertificationID != value))
				{
					if (this._DriverCertification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverCertificationIDChanging(value);
					this.SendPropertyChanging();
					this._DriverCertificationID = value;
					this.SendPropertyChanged("DriverCertificationID");
					this.OnDriverCertificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbonnementAmount", DbType="Int")]
		public System.Nullable<int> AbonnementAmount
		{
			get
			{
				return this._AbonnementAmount;
			}
			set
			{
				if ((this._AbonnementAmount != value))
				{
					this.OnAbonnementAmountChanging(value);
					this.SendPropertyChanging();
					this._AbonnementAmount = value;
					this.SendPropertyChanged("AbonnementAmount");
					this.OnAbonnementAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbonnementBillNo", DbType="VarChar(15)")]
		public string AbonnementBillNo
		{
			get
			{
				return this._AbonnementBillNo;
			}
			set
			{
				if ((this._AbonnementBillNo != value))
				{
					this.OnAbonnementBillNoChanging(value);
					this.SendPropertyChanging();
					this._AbonnementBillNo = value;
					this.SendPropertyChanged("AbonnementBillNo");
					this.OnAbonnementBillNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverCertificationRevivals_DriverCertifications", Storage="_DriverCertification", ThisKey="DriverCertificationID", OtherKey="DriverCertificationID", IsForeignKey=true, DeleteOnNull=true)]
		public DriverCertification DriverCertification
		{
			get
			{
				return this._DriverCertification.Entity;
			}
			set
			{
				DriverCertification previousValue = this._DriverCertification.Entity;
				if (((previousValue != value) 
							|| (this._DriverCertification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DriverCertification.Entity = null;
						previousValue.DriverCertificationRevivals.Remove(this);
					}
					this._DriverCertification.Entity = value;
					if ((value != null))
					{
						value.DriverCertificationRevivals.Add(this);
						this._DriverCertificationID = value.DriverCertificationID;
					}
					else
					{
						this._DriverCertificationID = default(int);
					}
					this.SendPropertyChanged("DriverCertification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DriverCertifications")]
	public partial class DriverCertification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DriverCertificationID;
		
		private int _PersonID;
		
		private byte _CertificationType;
		
		private string _DriverCertificationNo;
		
		private string _DriverCode;
		
		private System.DateTime _SubmitDate;
		
		private System.Nullable<System.DateTime> _VerificationDate;
		
		private System.Nullable<System.DateTime> _LockOutDate;
		
		private EntitySet<DriverCertificationCar> _DriverCertificationCars;
		
		private EntitySet<DriverCertificationInquiry> _DriverCertificationInquiries;
		
		private EntitySet<DriverCertificationRevival> _DriverCertificationRevivals;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Insurance> _Insurance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriverCertificationIDChanging(int value);
    partial void OnDriverCertificationIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnCertificationTypeChanging(byte value);
    partial void OnCertificationTypeChanged();
    partial void OnDriverCertificationNoChanging(string value);
    partial void OnDriverCertificationNoChanged();
    partial void OnDriverCodeChanging(string value);
    partial void OnDriverCodeChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnVerificationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVerificationDateChanged();
    partial void OnLockOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLockOutDateChanged();
    #endregion
		
		public DriverCertification()
		{
			this._DriverCertificationCars = new EntitySet<DriverCertificationCar>(new Action<DriverCertificationCar>(this.attach_DriverCertificationCars), new Action<DriverCertificationCar>(this.detach_DriverCertificationCars));
			this._DriverCertificationInquiries = new EntitySet<DriverCertificationInquiry>(new Action<DriverCertificationInquiry>(this.attach_DriverCertificationInquiries), new Action<DriverCertificationInquiry>(this.detach_DriverCertificationInquiries));
			this._DriverCertificationRevivals = new EntitySet<DriverCertificationRevival>(new Action<DriverCertificationRevival>(this.attach_DriverCertificationRevivals), new Action<DriverCertificationRevival>(this.detach_DriverCertificationRevivals));
			this._Person = default(EntityRef<Person>);
			this._Insurance = default(EntityRef<Insurance>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverCertificationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DriverCertificationID
		{
			get
			{
				return this._DriverCertificationID;
			}
			set
			{
				if ((this._DriverCertificationID != value))
				{
					this.OnDriverCertificationIDChanging(value);
					this.SendPropertyChanging();
					this._DriverCertificationID = value;
					this.SendPropertyChanged("DriverCertificationID");
					this.OnDriverCertificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CertificationType", DbType="TinyInt NOT NULL")]
		public byte CertificationType
		{
			get
			{
				return this._CertificationType;
			}
			set
			{
				if ((this._CertificationType != value))
				{
					this.OnCertificationTypeChanging(value);
					this.SendPropertyChanging();
					this._CertificationType = value;
					this.SendPropertyChanged("CertificationType");
					this.OnCertificationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverCertificationNo", DbType="VarChar(20)")]
		public string DriverCertificationNo
		{
			get
			{
				return this._DriverCertificationNo;
			}
			set
			{
				if ((this._DriverCertificationNo != value))
				{
					this.OnDriverCertificationNoChanging(value);
					this.SendPropertyChanging();
					this._DriverCertificationNo = value;
					this.SendPropertyChanged("DriverCertificationNo");
					this.OnDriverCertificationNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverCode", DbType="VarChar(6)")]
		public string DriverCode
		{
			get
			{
				return this._DriverCode;
			}
			set
			{
				if ((this._DriverCode != value))
				{
					this.OnDriverCodeChanging(value);
					this.SendPropertyChanging();
					this._DriverCode = value;
					this.SendPropertyChanged("DriverCode");
					this.OnDriverCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerificationDate", DbType="Date")]
		public System.Nullable<System.DateTime> VerificationDate
		{
			get
			{
				return this._VerificationDate;
			}
			set
			{
				if ((this._VerificationDate != value))
				{
					this.OnVerificationDateChanging(value);
					this.SendPropertyChanging();
					this._VerificationDate = value;
					this.SendPropertyChanged("VerificationDate");
					this.OnVerificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutDate", DbType="Date")]
		public System.Nullable<System.DateTime> LockOutDate
		{
			get
			{
				return this._LockOutDate;
			}
			set
			{
				if ((this._LockOutDate != value))
				{
					this.OnLockOutDateChanging(value);
					this.SendPropertyChanging();
					this._LockOutDate = value;
					this.SendPropertyChanged("LockOutDate");
					this.OnLockOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverCertificationCars_DriverCertifications", Storage="_DriverCertificationCars", ThisKey="DriverCertificationID", OtherKey="DriverCertificationID", DeleteRule="CASCADE")]
		public EntitySet<DriverCertificationCar> DriverCertificationCars
		{
			get
			{
				return this._DriverCertificationCars;
			}
			set
			{
				this._DriverCertificationCars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverCertificationInquiries_DriverCertifications", Storage="_DriverCertificationInquiries", ThisKey="DriverCertificationID", OtherKey="DriverCertificationID", DeleteRule="CASCADE")]
		public EntitySet<DriverCertificationInquiry> DriverCertificationInquiries
		{
			get
			{
				return this._DriverCertificationInquiries;
			}
			set
			{
				this._DriverCertificationInquiries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverCertificationRevivals_DriverCertifications", Storage="_DriverCertificationRevivals", ThisKey="DriverCertificationID", OtherKey="DriverCertificationID", DeleteRule="CASCADE")]
		public EntitySet<DriverCertificationRevival> DriverCertificationRevivals
		{
			get
			{
				return this._DriverCertificationRevivals;
			}
			set
			{
				this._DriverCertificationRevivals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverCertifications_Persons", Storage="_Person", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true, DeleteOnNull=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.DriverCertifications.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.DriverCertifications.Add(this);
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Insurances_DriverCertifications", Storage="_Insurance", ThisKey="DriverCertificationID", OtherKey="DriverCertificationID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public Insurance Insurance
		{
			get
			{
				return this._Insurance.Entity;
			}
			set
			{
				Insurance previousValue = this._Insurance.Entity;
				if (((previousValue != value) 
							|| (this._Insurance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurance.Entity = null;
						previousValue.DriverCertification = null;
					}
					this._Insurance.Entity = value;
					if ((value != null))
					{
						value.DriverCertification = this;
					}
					this.SendPropertyChanged("Insurance");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DriverCertificationCars(DriverCertificationCar entity)
		{
			this.SendPropertyChanging();
			entity.DriverCertification = this;
		}
		
		private void detach_DriverCertificationCars(DriverCertificationCar entity)
		{
			this.SendPropertyChanging();
			entity.DriverCertification = null;
		}
		
		private void attach_DriverCertificationInquiries(DriverCertificationInquiry entity)
		{
			this.SendPropertyChanging();
			entity.DriverCertification = this;
		}
		
		private void detach_DriverCertificationInquiries(DriverCertificationInquiry entity)
		{
			this.SendPropertyChanging();
			entity.DriverCertification = null;
		}
		
		private void attach_DriverCertificationRevivals(DriverCertificationRevival entity)
		{
			this.SendPropertyChanging();
			entity.DriverCertification = this;
		}
		
		private void detach_DriverCertificationRevivals(DriverCertificationRevival entity)
		{
			this.SendPropertyChanging();
			entity.DriverCertification = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DriverEndMembershipRequests")]
	public partial class DriverEndMembershipRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private int _AjancyDriverID;
		
		private short _RoleID;
		
		private string _Comment;
		
		private System.DateTime _SubmitDate;
		
		private string _Reply;
		
		private System.Nullable<System.DateTime> _ReplyDate;
		
		private bool _Confirmed;
		
		private EntityRef<AjancyDriver> _AjancyDriver;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnAjancyDriverIDChanging(int value);
    partial void OnAjancyDriverIDChanged();
    partial void OnRoleIDChanging(short value);
    partial void OnRoleIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnReplyChanging(string value);
    partial void OnReplyChanged();
    partial void OnReplyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReplyDateChanged();
    partial void OnConfirmedChanging(bool value);
    partial void OnConfirmedChanged();
    #endregion
		
		public DriverEndMembershipRequest()
		{
			this._AjancyDriver = default(EntityRef<AjancyDriver>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyDriverID", DbType="Int NOT NULL")]
		public int AjancyDriverID
		{
			get
			{
				return this._AjancyDriverID;
			}
			set
			{
				if ((this._AjancyDriverID != value))
				{
					if (this._AjancyDriver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAjancyDriverIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyDriverID = value;
					this.SendPropertyChanged("AjancyDriverID");
					this.OnAjancyDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="SmallInt NOT NULL")]
		public short RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="DateTime NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reply", DbType="NVarChar(200)")]
		public string Reply
		{
			get
			{
				return this._Reply;
			}
			set
			{
				if ((this._Reply != value))
				{
					this.OnReplyChanging(value);
					this.SendPropertyChanging();
					this._Reply = value;
					this.SendPropertyChanged("Reply");
					this.OnReplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReplyDate
		{
			get
			{
				return this._ReplyDate;
			}
			set
			{
				if ((this._ReplyDate != value))
				{
					this.OnReplyDateChanging(value);
					this.SendPropertyChanging();
					this._ReplyDate = value;
					this.SendPropertyChanged("ReplyDate");
					this.OnReplyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed", DbType="Bit NOT NULL")]
		public bool Confirmed
		{
			get
			{
				return this._Confirmed;
			}
			set
			{
				if ((this._Confirmed != value))
				{
					this.OnConfirmedChanging(value);
					this.SendPropertyChanging();
					this._Confirmed = value;
					this.SendPropertyChanged("Confirmed");
					this.OnConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverEndMembershipRequests_AjancyDrivers", Storage="_AjancyDriver", ThisKey="AjancyDriverID", OtherKey="AjancyDriverID", IsForeignKey=true, DeleteOnNull=true)]
		public AjancyDriver AjancyDriver
		{
			get
			{
				return this._AjancyDriver.Entity;
			}
			set
			{
				AjancyDriver previousValue = this._AjancyDriver.Entity;
				if (((previousValue != value) 
							|| (this._AjancyDriver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AjancyDriver.Entity = null;
						previousValue.DriverEndMembershipRequests.Remove(this);
					}
					this._AjancyDriver.Entity = value;
					if ((value != null))
					{
						value.DriverEndMembershipRequests.Add(this);
						this._AjancyDriverID = value.AjancyDriverID;
					}
					else
					{
						this._AjancyDriverID = default(int);
					}
					this.SendPropertyChanged("AjancyDriver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverEndMembershipRequests_Roles", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.DriverEndMembershipRequests.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.DriverEndMembershipRequests.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(short);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DriverInsuranceRequests")]
	public partial class DriverInsuranceRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private int _AjancyDriverID;
		
		private string _Comment;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<AjancyDriver> _AjancyDriver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnAjancyDriverIDChanging(int value);
    partial void OnAjancyDriverIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public DriverInsuranceRequest()
		{
			this._AjancyDriver = default(EntityRef<AjancyDriver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyDriverID", DbType="Int NOT NULL")]
		public int AjancyDriverID
		{
			get
			{
				return this._AjancyDriverID;
			}
			set
			{
				if ((this._AjancyDriverID != value))
				{
					if (this._AjancyDriver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAjancyDriverIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyDriverID = value;
					this.SendPropertyChanged("AjancyDriverID");
					this.OnAjancyDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(200)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverInsuranceRequests_AjancyDrivers", Storage="_AjancyDriver", ThisKey="AjancyDriverID", OtherKey="AjancyDriverID", IsForeignKey=true, DeleteOnNull=true)]
		public AjancyDriver AjancyDriver
		{
			get
			{
				return this._AjancyDriver.Entity;
			}
			set
			{
				AjancyDriver previousValue = this._AjancyDriver.Entity;
				if (((previousValue != value) 
							|| (this._AjancyDriver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AjancyDriver.Entity = null;
						previousValue.DriverInsuranceRequests.Remove(this);
					}
					this._AjancyDriver.Entity = value;
					if ((value != null))
					{
						value.DriverInsuranceRequests.Add(this);
						this._AjancyDriverID = value.AjancyDriverID;
					}
					else
					{
						this._AjancyDriverID = default(int);
					}
					this.SendPropertyChanged("AjancyDriver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrivingLicenses")]
	public partial class DrivingLicense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DrivingLicenseID;
		
		private int _PersonID;
		
		private string _DrivingLicenseNo;
		
		private System.DateTime _ExportDate;
		
		private byte _Type;
		
		private string _ExportPlace;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrivingLicenseIDChanging(int value);
    partial void OnDrivingLicenseIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnDrivingLicenseNoChanging(string value);
    partial void OnDrivingLicenseNoChanged();
    partial void OnExportDateChanging(System.DateTime value);
    partial void OnExportDateChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnExportPlaceChanging(string value);
    partial void OnExportPlaceChanged();
    #endregion
		
		public DrivingLicense()
		{
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrivingLicenseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DrivingLicenseID
		{
			get
			{
				return this._DrivingLicenseID;
			}
			set
			{
				if ((this._DrivingLicenseID != value))
				{
					this.OnDrivingLicenseIDChanging(value);
					this.SendPropertyChanging();
					this._DrivingLicenseID = value;
					this.SendPropertyChanged("DrivingLicenseID");
					this.OnDrivingLicenseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrivingLicenseNo", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string DrivingLicenseNo
		{
			get
			{
				return this._DrivingLicenseNo;
			}
			set
			{
				if ((this._DrivingLicenseNo != value))
				{
					this.OnDrivingLicenseNoChanging(value);
					this.SendPropertyChanging();
					this._DrivingLicenseNo = value;
					this.SendPropertyChanged("DrivingLicenseNo");
					this.OnDrivingLicenseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExportDate", DbType="Date NOT NULL")]
		public System.DateTime ExportDate
		{
			get
			{
				return this._ExportDate;
			}
			set
			{
				if ((this._ExportDate != value))
				{
					this.OnExportDateChanging(value);
					this.SendPropertyChanging();
					this._ExportDate = value;
					this.SendPropertyChanged("ExportDate");
					this.OnExportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExportPlace", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ExportPlace
		{
			get
			{
				return this._ExportPlace;
			}
			set
			{
				if ((this._ExportPlace != value))
				{
					this.OnExportPlaceChanging(value);
					this.SendPropertyChanging();
					this._ExportPlace = value;
					this.SendPropertyChanged("ExportPlace");
					this.OnExportPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DrivingLicenses_Persons", Storage="_Person", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true, DeleteOnNull=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.DrivingLicenses.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.DrivingLicenses.Add(this);
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FormerBusinesses")]
	public partial class FormerBusiness : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AjancyID;
		
		private string _BusinessLicenseNo;
		
		private System.Nullable<System.DateTime> _BusinessLicenseDate;
		
		private System.Nullable<System.DateTime> _BusinessStartDate;
		
		private string _Board;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<Ajancy> _Ajancy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAjancyIDChanging(int value);
    partial void OnAjancyIDChanged();
    partial void OnBusinessLicenseNoChanging(string value);
    partial void OnBusinessLicenseNoChanged();
    partial void OnBusinessLicenseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBusinessLicenseDateChanged();
    partial void OnBusinessStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBusinessStartDateChanged();
    partial void OnBoardChanging(string value);
    partial void OnBoardChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public FormerBusiness()
		{
			this._Ajancy = default(EntityRef<Ajancy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AjancyID
		{
			get
			{
				return this._AjancyID;
			}
			set
			{
				if ((this._AjancyID != value))
				{
					if (this._Ajancy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAjancyIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyID = value;
					this.SendPropertyChanged("AjancyID");
					this.OnAjancyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessLicenseNo", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string BusinessLicenseNo
		{
			get
			{
				return this._BusinessLicenseNo;
			}
			set
			{
				if ((this._BusinessLicenseNo != value))
				{
					this.OnBusinessLicenseNoChanging(value);
					this.SendPropertyChanging();
					this._BusinessLicenseNo = value;
					this.SendPropertyChanged("BusinessLicenseNo");
					this.OnBusinessLicenseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessLicenseDate", DbType="Date")]
		public System.Nullable<System.DateTime> BusinessLicenseDate
		{
			get
			{
				return this._BusinessLicenseDate;
			}
			set
			{
				if ((this._BusinessLicenseDate != value))
				{
					this.OnBusinessLicenseDateChanging(value);
					this.SendPropertyChanging();
					this._BusinessLicenseDate = value;
					this.SendPropertyChanged("BusinessLicenseDate");
					this.OnBusinessLicenseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessStartDate", DbType="Date")]
		public System.Nullable<System.DateTime> BusinessStartDate
		{
			get
			{
				return this._BusinessStartDate;
			}
			set
			{
				if ((this._BusinessStartDate != value))
				{
					this.OnBusinessStartDateChanging(value);
					this.SendPropertyChanging();
					this._BusinessStartDate = value;
					this.SendPropertyChanged("BusinessStartDate");
					this.OnBusinessStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Board", DbType="NVarChar(20)")]
		public string Board
		{
			get
			{
				return this._Board;
			}
			set
			{
				if ((this._Board != value))
				{
					this.OnBoardChanging(value);
					this.SendPropertyChanging();
					this._Board = value;
					this.SendPropertyChanged("Board");
					this.OnBoardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_FormerBusiness_Ajancies", Storage="_Ajancy", ThisKey="AjancyID", OtherKey="AjancyID", IsForeignKey=true)]
		public Ajancy Ajancy
		{
			get
			{
				return this._Ajancy.Entity;
			}
			set
			{
				Ajancy previousValue = this._Ajancy.Entity;
				if (((previousValue != value) 
							|| (this._Ajancy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ajancy.Entity = null;
						previousValue.FormerBusiness = null;
					}
					this._Ajancy.Entity = value;
					if ((value != null))
					{
						value.FormerBusiness = this;
						this._AjancyID = value.AjancyID;
					}
					else
					{
						this._AjancyID = default(int);
					}
					this.SendPropertyChanged("Ajancy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FuelCards")]
	public partial class FuelCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FuelCardID;
		
		private int _CarID;
		
		private string _PAN;
		
		private byte _CardType;
		
		private System.DateTime _SubmitDate;
		
		private System.Nullable<System.DateTime> _DiscardDate;
		
		private EntityRef<BlockedFuelCard> _BlockedFuelCard;
		
		private EntityRef<Car> _Car;
		
		private EntitySet<FuelCardSubstitution> _FuelCardSubstitutions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFuelCardIDChanging(int value);
    partial void OnFuelCardIDChanged();
    partial void OnCarIDChanging(int value);
    partial void OnCarIDChanged();
    partial void OnPANChanging(string value);
    partial void OnPANChanged();
    partial void OnCardTypeChanging(byte value);
    partial void OnCardTypeChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnDiscardDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDiscardDateChanged();
    #endregion
		
		public FuelCard()
		{
			this._BlockedFuelCard = default(EntityRef<BlockedFuelCard>);
			this._Car = default(EntityRef<Car>);
			this._FuelCardSubstitutions = new EntitySet<FuelCardSubstitution>(new Action<FuelCardSubstitution>(this.attach_FuelCardSubstitutions), new Action<FuelCardSubstitution>(this.detach_FuelCardSubstitutions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelCardID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FuelCardID
		{
			get
			{
				return this._FuelCardID;
			}
			set
			{
				if ((this._FuelCardID != value))
				{
					this.OnFuelCardIDChanging(value);
					this.SendPropertyChanging();
					this._FuelCardID = value;
					this.SendPropertyChanged("FuelCardID");
					this.OnFuelCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarID", DbType="Int NOT NULL")]
		public int CarID
		{
			get
			{
				return this._CarID;
			}
			set
			{
				if ((this._CarID != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarIDChanging(value);
					this.SendPropertyChanging();
					this._CarID = value;
					this.SendPropertyChanged("CarID");
					this.OnCarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAN", DbType="Char(16) NOT NULL", CanBeNull=false)]
		public string PAN
		{
			get
			{
				return this._PAN;
			}
			set
			{
				if ((this._PAN != value))
				{
					this.OnPANChanging(value);
					this.SendPropertyChanging();
					this._PAN = value;
					this.SendPropertyChanged("PAN");
					this.OnPANChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardType", DbType="TinyInt NOT NULL")]
		public byte CardType
		{
			get
			{
				return this._CardType;
			}
			set
			{
				if ((this._CardType != value))
				{
					this.OnCardTypeChanging(value);
					this.SendPropertyChanging();
					this._CardType = value;
					this.SendPropertyChanged("CardType");
					this.OnCardTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscardDate", DbType="Date")]
		public System.Nullable<System.DateTime> DiscardDate
		{
			get
			{
				return this._DiscardDate;
			}
			set
			{
				if ((this._DiscardDate != value))
				{
					this.OnDiscardDateChanging(value);
					this.SendPropertyChanging();
					this._DiscardDate = value;
					this.SendPropertyChanged("DiscardDate");
					this.OnDiscardDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_BlockedFuelCards_FuelCards", Storage="_BlockedFuelCard", ThisKey="FuelCardID", OtherKey="FuelCardID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public BlockedFuelCard BlockedFuelCard
		{
			get
			{
				return this._BlockedFuelCard.Entity;
			}
			set
			{
				BlockedFuelCard previousValue = this._BlockedFuelCard.Entity;
				if (((previousValue != value) 
							|| (this._BlockedFuelCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlockedFuelCard.Entity = null;
						previousValue.FuelCard = null;
					}
					this._BlockedFuelCard.Entity = value;
					if ((value != null))
					{
						value.FuelCard = this;
					}
					this.SendPropertyChanged("BlockedFuelCard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_FuelCards_Cars", Storage="_Car", ThisKey="CarID", OtherKey="CarID", IsForeignKey=true, DeleteOnNull=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.FuelCards.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.FuelCards.Add(this);
						this._CarID = value.CarID;
					}
					else
					{
						this._CarID = default(int);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_FuelCardSubstitutions_FuelCards", Storage="_FuelCardSubstitutions", ThisKey="FuelCardID", OtherKey="AjancyTypeFuelCardID", DeleteRule="CASCADE")]
		public EntitySet<FuelCardSubstitution> FuelCardSubstitutions
		{
			get
			{
				return this._FuelCardSubstitutions;
			}
			set
			{
				this._FuelCardSubstitutions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FuelCardSubstitutions(FuelCardSubstitution entity)
		{
			this.SendPropertyChanging();
			entity.FuelCard = this;
		}
		
		private void detach_FuelCardSubstitutions(FuelCardSubstitution entity)
		{
			this.SendPropertyChanging();
			entity.FuelCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FuelCardSubstitutions")]
	public partial class FuelCardSubstitution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FuelCardSubstituteID;
		
		private int _AjancyTypeFuelCardID;
		
		private System.Nullable<int> _PersonalTypeFuelCardID;
		
		private int _UserInRoleID;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<FuelCard> _FuelCard;
		
		private EntityRef<UsersInRole> _UsersInRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFuelCardSubstituteIDChanging(int value);
    partial void OnFuelCardSubstituteIDChanged();
    partial void OnAjancyTypeFuelCardIDChanging(int value);
    partial void OnAjancyTypeFuelCardIDChanged();
    partial void OnPersonalTypeFuelCardIDChanging(System.Nullable<int> value);
    partial void OnPersonalTypeFuelCardIDChanged();
    partial void OnUserInRoleIDChanging(int value);
    partial void OnUserInRoleIDChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public FuelCardSubstitution()
		{
			this._FuelCard = default(EntityRef<FuelCard>);
			this._UsersInRole = default(EntityRef<UsersInRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelCardSubstituteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FuelCardSubstituteID
		{
			get
			{
				return this._FuelCardSubstituteID;
			}
			set
			{
				if ((this._FuelCardSubstituteID != value))
				{
					this.OnFuelCardSubstituteIDChanging(value);
					this.SendPropertyChanging();
					this._FuelCardSubstituteID = value;
					this.SendPropertyChanged("FuelCardSubstituteID");
					this.OnFuelCardSubstituteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AjancyTypeFuelCardID", DbType="Int NOT NULL")]
		public int AjancyTypeFuelCardID
		{
			get
			{
				return this._AjancyTypeFuelCardID;
			}
			set
			{
				if ((this._AjancyTypeFuelCardID != value))
				{
					if (this._FuelCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAjancyTypeFuelCardIDChanging(value);
					this.SendPropertyChanging();
					this._AjancyTypeFuelCardID = value;
					this.SendPropertyChanged("AjancyTypeFuelCardID");
					this.OnAjancyTypeFuelCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalTypeFuelCardID", DbType="Int")]
		public System.Nullable<int> PersonalTypeFuelCardID
		{
			get
			{
				return this._PersonalTypeFuelCardID;
			}
			set
			{
				if ((this._PersonalTypeFuelCardID != value))
				{
					this.OnPersonalTypeFuelCardIDChanging(value);
					this.SendPropertyChanging();
					this._PersonalTypeFuelCardID = value;
					this.SendPropertyChanged("PersonalTypeFuelCardID");
					this.OnPersonalTypeFuelCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInRoleID", DbType="Int NOT NULL")]
		public int UserInRoleID
		{
			get
			{
				return this._UserInRoleID;
			}
			set
			{
				if ((this._UserInRoleID != value))
				{
					if (this._UsersInRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserInRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserInRoleID = value;
					this.SendPropertyChanged("UserInRoleID");
					this.OnUserInRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_FuelCardSubstitutions_FuelCards", Storage="_FuelCard", ThisKey="AjancyTypeFuelCardID", OtherKey="FuelCardID", IsForeignKey=true, DeleteOnNull=true)]
		public FuelCard FuelCard
		{
			get
			{
				return this._FuelCard.Entity;
			}
			set
			{
				FuelCard previousValue = this._FuelCard.Entity;
				if (((previousValue != value) 
							|| (this._FuelCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FuelCard.Entity = null;
						previousValue.FuelCardSubstitutions.Remove(this);
					}
					this._FuelCard.Entity = value;
					if ((value != null))
					{
						value.FuelCardSubstitutions.Add(this);
						this._AjancyTypeFuelCardID = value.FuelCardID;
					}
					else
					{
						this._AjancyTypeFuelCardID = default(int);
					}
					this.SendPropertyChanged("FuelCard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_FuelCardSubstitutions_UsersInRoles", Storage="_UsersInRole", ThisKey="UserInRoleID", OtherKey="UserRoleID", IsForeignKey=true)]
		public UsersInRole UsersInRole
		{
			get
			{
				return this._UsersInRole.Entity;
			}
			set
			{
				UsersInRole previousValue = this._UsersInRole.Entity;
				if (((previousValue != value) 
							|| (this._UsersInRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersInRole.Entity = null;
						previousValue.FuelCardSubstitutions.Remove(this);
					}
					this._UsersInRole.Entity = value;
					if ((value != null))
					{
						value.FuelCardSubstitutions.Add(this);
						this._UserInRoleID = value.UserRoleID;
					}
					else
					{
						this._UserInRoleID = default(int);
					}
					this.SendPropertyChanged("UsersInRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Insurances")]
	public partial class Insurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DriverCertificationID;
		
		private string _InsuranceNo;
		
		private string _BranchNo;
		
		private bool _CancelInsurance;
		
		private System.DateTime _SubmitDate;
		
		private EntityRef<DriverCertification> _DriverCertification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriverCertificationIDChanging(int value);
    partial void OnDriverCertificationIDChanged();
    partial void OnInsuranceNoChanging(string value);
    partial void OnInsuranceNoChanged();
    partial void OnBranchNoChanging(string value);
    partial void OnBranchNoChanged();
    partial void OnCancelInsuranceChanging(bool value);
    partial void OnCancelInsuranceChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public Insurance()
		{
			this._DriverCertification = default(EntityRef<DriverCertification>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverCertificationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DriverCertificationID
		{
			get
			{
				return this._DriverCertificationID;
			}
			set
			{
				if ((this._DriverCertificationID != value))
				{
					if (this._DriverCertification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverCertificationIDChanging(value);
					this.SendPropertyChanging();
					this._DriverCertificationID = value;
					this.SendPropertyChanged("DriverCertificationID");
					this.OnDriverCertificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceNo", DbType="VarChar(20)")]
		public string InsuranceNo
		{
			get
			{
				return this._InsuranceNo;
			}
			set
			{
				if ((this._InsuranceNo != value))
				{
					this.OnInsuranceNoChanging(value);
					this.SendPropertyChanging();
					this._InsuranceNo = value;
					this.SendPropertyChanged("InsuranceNo");
					this.OnInsuranceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchNo", DbType="VarChar(6)")]
		public string BranchNo
		{
			get
			{
				return this._BranchNo;
			}
			set
			{
				if ((this._BranchNo != value))
				{
					this.OnBranchNoChanging(value);
					this.SendPropertyChanging();
					this._BranchNo = value;
					this.SendPropertyChanged("BranchNo");
					this.OnBranchNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CancelInsurance", DbType="Bit NOT NULL")]
		public bool CancelInsurance
		{
			get
			{
				return this._CancelInsurance;
			}
			set
			{
				if ((this._CancelInsurance != value))
				{
					this.OnCancelInsuranceChanging(value);
					this.SendPropertyChanging();
					this._CancelInsurance = value;
					this.SendPropertyChanged("CancelInsurance");
					this.OnCancelInsuranceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Insurances_DriverCertifications", Storage="_DriverCertification", ThisKey="DriverCertificationID", OtherKey="DriverCertificationID", IsForeignKey=true, DeleteOnNull=true)]
		public DriverCertification DriverCertification
		{
			get
			{
				return this._DriverCertification.Entity;
			}
			set
			{
				DriverCertification previousValue = this._DriverCertification.Entity;
				if (((previousValue != value) 
							|| (this._DriverCertification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DriverCertification.Entity = null;
						previousValue.Insurance = null;
					}
					this._DriverCertification.Entity = value;
					if ((value != null))
					{
						value.Insurance = this;
						this._DriverCertificationID = value.DriverCertificationID;
					}
					else
					{
						this._DriverCertificationID = default(int);
					}
					this.SendPropertyChanged("DriverCertification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewFuelCards")]
	public partial class NewFuelCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PAN;
		
		private string _VIN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPANChanging(string value);
    partial void OnPANChanged();
    partial void OnVINChanging(string value);
    partial void OnVINChanged();
    #endregion
		
		public NewFuelCard()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAN", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PAN
		{
			get
			{
				return this._PAN;
			}
			set
			{
				if ((this._PAN != value))
				{
					this.OnPANChanging(value);
					this.SendPropertyChanging();
					this._PAN = value;
					this.SendPropertyChanged("PAN");
					this.OnPANChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIN", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string VIN
		{
			get
			{
				return this._VIN;
			}
			set
			{
				if ((this._VIN != value))
				{
					this.OnVINChanging(value);
					this.SendPropertyChanging();
					this._VIN = value;
					this.SendPropertyChanged("VIN");
					this.OnVINChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Persons")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersonID;
		
		private string _NationalCode;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Father;
		
		private string _BirthCertificateNo;
		
		private string _BirthCertificateAlfa;
		
		private string _BirthCertificateSerie;
		
		private string _BirthCertificateSerial;
		
		private string _BirthCertificatePlace;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private string _BirthPlace;
		
		private System.Nullable<byte> _Gender;
		
		private System.Nullable<byte> _Marriage;
		
		private string _FamilyMembersCount;
		
		private System.Nullable<byte> _Education;
		
		private System.Nullable<byte> _Religion;
		
		private string _Subreligion;
		
		private System.Nullable<byte> _JobStatus;
		
		private System.Nullable<byte> _MilitaryService;
		
		private string _Mobile;
		
		private string _Phone;
		
		private string _PostalCode;
		
		private string _Address;
		
		private string _FormerJob;
		
		private System.Nullable<byte> _FormerJobType;
		
		private System.DateTime _SubmitDate;
		
		private EntitySet<CarPlateNumber> _CarPlateNumbers;
		
		private EntitySet<Doument> _Douments;
		
		private EntitySet<DriverCertification> _DriverCertifications;
		
		private EntitySet<DrivingLicense> _DrivingLicenses;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnNationalCodeChanging(string value);
    partial void OnNationalCodeChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFatherChanging(string value);
    partial void OnFatherChanged();
    partial void OnBirthCertificateNoChanging(string value);
    partial void OnBirthCertificateNoChanged();
    partial void OnBirthCertificateAlfaChanging(string value);
    partial void OnBirthCertificateAlfaChanged();
    partial void OnBirthCertificateSerieChanging(string value);
    partial void OnBirthCertificateSerieChanged();
    partial void OnBirthCertificateSerialChanging(string value);
    partial void OnBirthCertificateSerialChanged();
    partial void OnBirthCertificatePlaceChanging(string value);
    partial void OnBirthCertificatePlaceChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnBirthPlaceChanging(string value);
    partial void OnBirthPlaceChanged();
    partial void OnGenderChanging(System.Nullable<byte> value);
    partial void OnGenderChanged();
    partial void OnMarriageChanging(System.Nullable<byte> value);
    partial void OnMarriageChanged();
    partial void OnFamilyMembersCountChanging(string value);
    partial void OnFamilyMembersCountChanged();
    partial void OnEducationChanging(System.Nullable<byte> value);
    partial void OnEducationChanged();
    partial void OnReligionChanging(System.Nullable<byte> value);
    partial void OnReligionChanged();
    partial void OnSubreligionChanging(string value);
    partial void OnSubreligionChanged();
    partial void OnJobStatusChanging(System.Nullable<byte> value);
    partial void OnJobStatusChanged();
    partial void OnMilitaryServiceChanging(System.Nullable<byte> value);
    partial void OnMilitaryServiceChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnFormerJobChanging(string value);
    partial void OnFormerJobChanged();
    partial void OnFormerJobTypeChanging(System.Nullable<byte> value);
    partial void OnFormerJobTypeChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    #endregion
		
		public Person()
		{
			this._CarPlateNumbers = new EntitySet<CarPlateNumber>(new Action<CarPlateNumber>(this.attach_CarPlateNumbers), new Action<CarPlateNumber>(this.detach_CarPlateNumbers));
			this._Douments = new EntitySet<Doument>(new Action<Doument>(this.attach_Douments), new Action<Doument>(this.detach_Douments));
			this._DriverCertifications = new EntitySet<DriverCertification>(new Action<DriverCertification>(this.attach_DriverCertifications), new Action<DriverCertification>(this.detach_DriverCertifications));
			this._DrivingLicenses = new EntitySet<DrivingLicense>(new Action<DrivingLicense>(this.attach_DrivingLicenses), new Action<DrivingLicense>(this.detach_DrivingLicenses));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalCode", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string NationalCode
		{
			get
			{
				return this._NationalCode;
			}
			set
			{
				if ((this._NationalCode != value))
				{
					this.OnNationalCodeChanging(value);
					this.SendPropertyChanging();
					this._NationalCode = value;
					this.SendPropertyChanged("NationalCode");
					this.OnNationalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Father", DbType="NVarChar(25)")]
		public string Father
		{
			get
			{
				return this._Father;
			}
			set
			{
				if ((this._Father != value))
				{
					this.OnFatherChanging(value);
					this.SendPropertyChanging();
					this._Father = value;
					this.SendPropertyChanged("Father");
					this.OnFatherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthCertificateNo", DbType="NChar(10)")]
		public string BirthCertificateNo
		{
			get
			{
				return this._BirthCertificateNo;
			}
			set
			{
				if ((this._BirthCertificateNo != value))
				{
					this.OnBirthCertificateNoChanging(value);
					this.SendPropertyChanging();
					this._BirthCertificateNo = value;
					this.SendPropertyChanged("BirthCertificateNo");
					this.OnBirthCertificateNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthCertificateAlfa", DbType="VarChar(2)")]
		public string BirthCertificateAlfa
		{
			get
			{
				return this._BirthCertificateAlfa;
			}
			set
			{
				if ((this._BirthCertificateAlfa != value))
				{
					this.OnBirthCertificateAlfaChanging(value);
					this.SendPropertyChanging();
					this._BirthCertificateAlfa = value;
					this.SendPropertyChanged("BirthCertificateAlfa");
					this.OnBirthCertificateAlfaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthCertificateSerie", DbType="VarChar(10)")]
		public string BirthCertificateSerie
		{
			get
			{
				return this._BirthCertificateSerie;
			}
			set
			{
				if ((this._BirthCertificateSerie != value))
				{
					this.OnBirthCertificateSerieChanging(value);
					this.SendPropertyChanging();
					this._BirthCertificateSerie = value;
					this.SendPropertyChanged("BirthCertificateSerie");
					this.OnBirthCertificateSerieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthCertificateSerial", DbType="VarChar(10)")]
		public string BirthCertificateSerial
		{
			get
			{
				return this._BirthCertificateSerial;
			}
			set
			{
				if ((this._BirthCertificateSerial != value))
				{
					this.OnBirthCertificateSerialChanging(value);
					this.SendPropertyChanging();
					this._BirthCertificateSerial = value;
					this.SendPropertyChanged("BirthCertificateSerial");
					this.OnBirthCertificateSerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthCertificatePlace", DbType="NVarChar(20)")]
		public string BirthCertificatePlace
		{
			get
			{
				return this._BirthCertificatePlace;
			}
			set
			{
				if ((this._BirthCertificatePlace != value))
				{
					this.OnBirthCertificatePlaceChanging(value);
					this.SendPropertyChanging();
					this._BirthCertificatePlace = value;
					this.SendPropertyChanged("BirthCertificatePlace");
					this.OnBirthCertificatePlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthPlace", DbType="NVarChar(20)")]
		public string BirthPlace
		{
			get
			{
				return this._BirthPlace;
			}
			set
			{
				if ((this._BirthPlace != value))
				{
					this.OnBirthPlaceChanging(value);
					this.SendPropertyChanging();
					this._BirthPlace = value;
					this.SendPropertyChanged("BirthPlace");
					this.OnBirthPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="TinyInt")]
		public System.Nullable<byte> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Marriage", DbType="TinyInt")]
		public System.Nullable<byte> Marriage
		{
			get
			{
				return this._Marriage;
			}
			set
			{
				if ((this._Marriage != value))
				{
					this.OnMarriageChanging(value);
					this.SendPropertyChanging();
					this._Marriage = value;
					this.SendPropertyChanged("Marriage");
					this.OnMarriageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyMembersCount", DbType="VarChar(2)")]
		public string FamilyMembersCount
		{
			get
			{
				return this._FamilyMembersCount;
			}
			set
			{
				if ((this._FamilyMembersCount != value))
				{
					this.OnFamilyMembersCountChanging(value);
					this.SendPropertyChanging();
					this._FamilyMembersCount = value;
					this.SendPropertyChanged("FamilyMembersCount");
					this.OnFamilyMembersCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Education", DbType="TinyInt")]
		public System.Nullable<byte> Education
		{
			get
			{
				return this._Education;
			}
			set
			{
				if ((this._Education != value))
				{
					this.OnEducationChanging(value);
					this.SendPropertyChanging();
					this._Education = value;
					this.SendPropertyChanged("Education");
					this.OnEducationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Religion", DbType="TinyInt")]
		public System.Nullable<byte> Religion
		{
			get
			{
				return this._Religion;
			}
			set
			{
				if ((this._Religion != value))
				{
					this.OnReligionChanging(value);
					this.SendPropertyChanging();
					this._Religion = value;
					this.SendPropertyChanged("Religion");
					this.OnReligionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subreligion", DbType="NVarChar(20)")]
		public string Subreligion
		{
			get
			{
				return this._Subreligion;
			}
			set
			{
				if ((this._Subreligion != value))
				{
					this.OnSubreligionChanging(value);
					this.SendPropertyChanging();
					this._Subreligion = value;
					this.SendPropertyChanged("Subreligion");
					this.OnSubreligionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobStatus", DbType="TinyInt")]
		public System.Nullable<byte> JobStatus
		{
			get
			{
				return this._JobStatus;
			}
			set
			{
				if ((this._JobStatus != value))
				{
					this.OnJobStatusChanging(value);
					this.SendPropertyChanging();
					this._JobStatus = value;
					this.SendPropertyChanged("JobStatus");
					this.OnJobStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MilitaryService", DbType="TinyInt")]
		public System.Nullable<byte> MilitaryService
		{
			get
			{
				return this._MilitaryService;
			}
			set
			{
				if ((this._MilitaryService != value))
				{
					this.OnMilitaryServiceChanging(value);
					this.SendPropertyChanging();
					this._MilitaryService = value;
					this.SendPropertyChanged("MilitaryService");
					this.OnMilitaryServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Char(11)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(15)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="VarChar(10)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormerJob", DbType="NVarChar(20)")]
		public string FormerJob
		{
			get
			{
				return this._FormerJob;
			}
			set
			{
				if ((this._FormerJob != value))
				{
					this.OnFormerJobChanging(value);
					this.SendPropertyChanging();
					this._FormerJob = value;
					this.SendPropertyChanged("FormerJob");
					this.OnFormerJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormerJobType", DbType="TinyInt")]
		public System.Nullable<byte> FormerJobType
		{
			get
			{
				return this._FormerJobType;
			}
			set
			{
				if ((this._FormerJobType != value))
				{
					this.OnFormerJobTypeChanging(value);
					this.SendPropertyChanging();
					this._FormerJobType = value;
					this.SendPropertyChanged("FormerJobType");
					this.OnFormerJobTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CarPlateNumbers_Persons", Storage="_CarPlateNumbers", ThisKey="PersonID", OtherKey="OwnerPersonID", DeleteRule="NO ACTION")]
		public EntitySet<CarPlateNumber> CarPlateNumbers
		{
			get
			{
				return this._CarPlateNumbers;
			}
			set
			{
				this._CarPlateNumbers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Douments_Persons", Storage="_Douments", ThisKey="PersonID", OtherKey="PersonID", DeleteRule="CASCADE")]
		public EntitySet<Doument> Douments
		{
			get
			{
				return this._Douments;
			}
			set
			{
				this._Douments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverCertifications_Persons", Storage="_DriverCertifications", ThisKey="PersonID", OtherKey="PersonID", DeleteRule="CASCADE")]
		public EntitySet<DriverCertification> DriverCertifications
		{
			get
			{
				return this._DriverCertifications;
			}
			set
			{
				this._DriverCertifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DrivingLicenses_Persons", Storage="_DrivingLicenses", ThisKey="PersonID", OtherKey="PersonID", DeleteRule="CASCADE")]
		public EntitySet<DrivingLicense> DrivingLicenses
		{
			get
			{
				return this._DrivingLicenses;
			}
			set
			{
				this._DrivingLicenses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Users_Persons", Storage="_User", ThisKey="PersonID", OtherKey="PersonID", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Person = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Person = this;
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CarPlateNumbers(CarPlateNumber entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_CarPlateNumbers(CarPlateNumber entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Douments(Doument entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Douments(Doument entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_DriverCertifications(DriverCertification entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_DriverCertifications(DriverCertification entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_DrivingLicenses(DrivingLicense entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_DrivingLicenses(DrivingLicense entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlateNumbers")]
	public partial class PlateNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlateNumberID;
		
		private string _TwoDigits;
		
		private string _Alphabet;
		
		private string _ThreeDigits;
		
		private string _RegionIdentifier;
		
		private EntitySet<CarPlateNumber> _CarPlateNumbers;
		
		private EntitySet<Comment> _Comments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlateNumberIDChanging(int value);
    partial void OnPlateNumberIDChanged();
    partial void OnTwoDigitsChanging(string value);
    partial void OnTwoDigitsChanged();
    partial void OnAlphabetChanging(string value);
    partial void OnAlphabetChanged();
    partial void OnThreeDigitsChanging(string value);
    partial void OnThreeDigitsChanged();
    partial void OnRegionIdentifierChanging(string value);
    partial void OnRegionIdentifierChanged();
    #endregion
		
		public PlateNumber()
		{
			this._CarPlateNumbers = new EntitySet<CarPlateNumber>(new Action<CarPlateNumber>(this.attach_CarPlateNumbers), new Action<CarPlateNumber>(this.detach_CarPlateNumbers));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlateNumberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlateNumberID
		{
			get
			{
				return this._PlateNumberID;
			}
			set
			{
				if ((this._PlateNumberID != value))
				{
					this.OnPlateNumberIDChanging(value);
					this.SendPropertyChanging();
					this._PlateNumberID = value;
					this.SendPropertyChanged("PlateNumberID");
					this.OnPlateNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoDigits", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string TwoDigits
		{
			get
			{
				return this._TwoDigits;
			}
			set
			{
				if ((this._TwoDigits != value))
				{
					this.OnTwoDigitsChanging(value);
					this.SendPropertyChanging();
					this._TwoDigits = value;
					this.SendPropertyChanged("TwoDigits");
					this.OnTwoDigitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alphabet", DbType="Char(1) NOT NULL", CanBeNull=false)]
		public string Alphabet
		{
			get
			{
				return this._Alphabet;
			}
			set
			{
				if ((this._Alphabet != value))
				{
					this.OnAlphabetChanging(value);
					this.SendPropertyChanging();
					this._Alphabet = value;
					this.SendPropertyChanged("Alphabet");
					this.OnAlphabetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreeDigits", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string ThreeDigits
		{
			get
			{
				return this._ThreeDigits;
			}
			set
			{
				if ((this._ThreeDigits != value))
				{
					this.OnThreeDigitsChanging(value);
					this.SendPropertyChanging();
					this._ThreeDigits = value;
					this.SendPropertyChanged("ThreeDigits");
					this.OnThreeDigitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionIdentifier", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string RegionIdentifier
		{
			get
			{
				return this._RegionIdentifier;
			}
			set
			{
				if ((this._RegionIdentifier != value))
				{
					this.OnRegionIdentifierChanging(value);
					this.SendPropertyChanging();
					this._RegionIdentifier = value;
					this.SendPropertyChanged("RegionIdentifier");
					this.OnRegionIdentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CarPlateNumbers_PlateNumbers", Storage="_CarPlateNumbers", ThisKey="PlateNumberID", OtherKey="PlateNumberID", DeleteRule="CASCADE")]
		public EntitySet<CarPlateNumber> CarPlateNumbers
		{
			get
			{
				return this._CarPlateNumbers;
			}
			set
			{
				this._CarPlateNumbers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Comments_PlateNumbers", Storage="_Comments", ThisKey="PlateNumberID", OtherKey="PlateNumberID", DeleteRule="CASCADE")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CarPlateNumbers(CarPlateNumber entity)
		{
			this.SendPropertyChanging();
			entity.PlateNumber = this;
		}
		
		private void detach_CarPlateNumbers(CarPlateNumber entity)
		{
			this.SendPropertyChanging();
			entity.PlateNumber = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.PlateNumber = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.PlateNumber = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Provinces")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ProvinceID;
		
		private string _Name;
		
		private EntitySet<City> _Cities;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvinceIDChanging(byte value);
    partial void OnProvinceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Province()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Cities_Provinces", Storage="_Cities", ThisKey="ProvinceID", OtherKey="ProvinceID", DeleteRule="NO ACTION")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Users_Provinces", Storage="_Users", ThisKey="ProvinceID", OtherKey="ProvinceID", DeleteRule="NO ACTION")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Province = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Province = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _RoleID;
		
		private string _RoleName;
		
		private EntitySet<AjancyComplaint> _AjancyComplaints;
		
		private EntitySet<DriverEndMembershipRequest> _DriverEndMembershipRequests;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(short value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			this._AjancyComplaints = new EntitySet<AjancyComplaint>(new Action<AjancyComplaint>(this.attach_AjancyComplaints), new Action<AjancyComplaint>(this.detach_AjancyComplaints));
			this._DriverEndMembershipRequests = new EntitySet<DriverEndMembershipRequest>(new Action<DriverEndMembershipRequest>(this.attach_DriverEndMembershipRequests), new Action<DriverEndMembershipRequest>(this.detach_DriverEndMembershipRequests));
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyComplaints_Roles", Storage="_AjancyComplaints", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
		public EntitySet<AjancyComplaint> AjancyComplaints
		{
			get
			{
				return this._AjancyComplaints;
			}
			set
			{
				this._AjancyComplaints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_DriverEndMembershipRequests_Roles", Storage="_DriverEndMembershipRequests", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
		public EntitySet<DriverEndMembershipRequest> DriverEndMembershipRequests
		{
			get
			{
				return this._DriverEndMembershipRequests;
			}
			set
			{
				this._DriverEndMembershipRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Memberships_Roles", Storage="_UsersInRoles", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AjancyComplaints(AjancyComplaint entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_AjancyComplaints(AjancyComplaint entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_DriverEndMembershipRequests(DriverEndMembershipRequest entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_DriverEndMembershipRequests(DriverEndMembershipRequest entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _PersonID;
		
		private string _UserName;
		
		private string _PassWord;
		
		private byte _ProvinceID;
		
		private System.Nullable<short> _CityID;
		
		private System.DateTime _SubmitDate;
		
		private System.Nullable<System.DateTime> _LockOutDate;
		
		private EntityRef<City> _City;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Province> _Province;
		
		private EntitySet<UsersInRole> _UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnProvinceIDChanging(byte value);
    partial void OnProvinceIDChanged();
    partial void OnCityIDChanging(System.Nullable<short> value);
    partial void OnCityIDChanged();
    partial void OnSubmitDateChanging(System.DateTime value);
    partial void OnSubmitDateChanged();
    partial void OnLockOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLockOutDateChanged();
    #endregion
		
		public User()
		{
			this._City = default(EntityRef<City>);
			this._Person = default(EntityRef<Person>);
			this._Province = default(EntityRef<Province>);
			this._UsersInRoles = new EntitySet<UsersInRole>(new Action<UsersInRole>(this.attach_UsersInRoles), new Action<UsersInRole>(this.detach_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NVarChar(50)")]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="TinyInt NOT NULL")]
		public byte ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					if (this._Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="SmallInt")]
		public System.Nullable<short> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="Date NOT NULL")]
		public System.DateTime SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockOutDate
		{
			get
			{
				return this._LockOutDate;
			}
			set
			{
				if ((this._LockOutDate != value))
				{
					this.OnLockOutDateChanging(value);
					this.SendPropertyChanging();
					this._LockOutDate = value;
					this.SendPropertyChanged("LockOutDate");
					this.OnLockOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Users_Cities", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(Nullable<short>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Users_Persons", Storage="_Person", ThisKey="PersonID", OtherKey="PersonID", IsForeignKey=true, DeleteOnNull=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.User = null;
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.User = this;
						this._PersonID = value.PersonID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Users_Provinces", Storage="_Province", ThisKey="ProvinceID", OtherKey="ProvinceID", IsForeignKey=true)]
		public Province Province
		{
			get
			{
				return this._Province.Entity;
			}
			set
			{
				Province previousValue = this._Province.Entity;
				if (((previousValue != value) 
							|| (this._Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Province.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Province.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._ProvinceID = value.ProvinceID;
					}
					else
					{
						this._ProvinceID = default(byte);
					}
					this.SendPropertyChanged("Province");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UsersInRoles_Users", Storage="_UsersInRoles", ThisKey="UserID", OtherKey="UserID", DeleteRule="CASCADE")]
		public EntitySet<UsersInRole> UsersInRoles
		{
			get
			{
				return this._UsersInRoles;
			}
			set
			{
				this._UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersInRoles(UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersInRoles")]
	public partial class UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserRoleID;
		
		private int _UserID;
		
		private short _RoleID;
		
		private System.DateTime _MembershipDate;
		
		private System.Nullable<System.DateTime> _LastLoginDate;
		
		private System.Nullable<System.DateTime> _LockOutDate;
		
		private EntitySet<AjancyPartner> _AjancyPartners;
		
		private EntitySet<FuelCardSubstitution> _FuelCardSubstitutions;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRoleIDChanging(int value);
    partial void OnUserRoleIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(short value);
    partial void OnRoleIDChanged();
    partial void OnMembershipDateChanging(System.DateTime value);
    partial void OnMembershipDateChanged();
    partial void OnLastLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginDateChanged();
    partial void OnLockOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLockOutDateChanged();
    #endregion
		
		public UsersInRole()
		{
			this._AjancyPartners = new EntitySet<AjancyPartner>(new Action<AjancyPartner>(this.attach_AjancyPartners), new Action<AjancyPartner>(this.detach_AjancyPartners));
			this._FuelCardSubstitutions = new EntitySet<FuelCardSubstitution>(new Action<FuelCardSubstitution>(this.attach_FuelCardSubstitutions), new Action<FuelCardSubstitution>(this.detach_FuelCardSubstitutions));
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="SmallInt NOT NULL")]
		public short RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembershipDate", DbType="Date NOT NULL")]
		public System.DateTime MembershipDate
		{
			get
			{
				return this._MembershipDate;
			}
			set
			{
				if ((this._MembershipDate != value))
				{
					this.OnMembershipDateChanging(value);
					this.SendPropertyChanging();
					this._MembershipDate = value;
					this.SendPropertyChanged("MembershipDate");
					this.OnMembershipDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockOutDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockOutDate
		{
			get
			{
				return this._LockOutDate;
			}
			set
			{
				if ((this._LockOutDate != value))
				{
					this.OnLockOutDateChanging(value);
					this.SendPropertyChanging();
					this._LockOutDate = value;
					this.SendPropertyChanged("LockOutDate");
					this.OnLockOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_AjancyPartners_UsersInRoles", Storage="_AjancyPartners", ThisKey="UserRoleID", OtherKey="UserRoleID", DeleteRule="NO ACTION")]
		public EntitySet<AjancyPartner> AjancyPartners
		{
			get
			{
				return this._AjancyPartners;
			}
			set
			{
				this._AjancyPartners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_FuelCardSubstitutions_UsersInRoles", Storage="_FuelCardSubstitutions", ThisKey="UserRoleID", OtherKey="UserInRoleID", DeleteRule="NO ACTION")]
		public EntitySet<FuelCardSubstitution> FuelCardSubstitutions
		{
			get
			{
				return this._FuelCardSubstitutions;
			}
			set
			{
				this._FuelCardSubstitutions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Memberships_Roles", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(short);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_UsersInRoles_Users", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteOnNull=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersInRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersInRoles.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AjancyPartners(AjancyPartner entity)
		{
			this.SendPropertyChanging();
			entity.UsersInRole = this;
		}
		
		private void detach_AjancyPartners(AjancyPartner entity)
		{
			this.SendPropertyChanging();
			entity.UsersInRole = null;
		}
		
		private void attach_FuelCardSubstitutions(FuelCardSubstitution entity)
		{
			this.SendPropertyChanging();
			entity.UsersInRole = this;
		}
		
		private void detach_FuelCardSubstitutions(FuelCardSubstitution entity)
		{
			this.SendPropertyChanging();
			entity.UsersInRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ZonePlateNumber")]
	public partial class ZonePlateNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZonePlateNumberID;
		
		private short _CityID;
		
		private string _Number;
		
		private EntitySet<CarPlateNumber> _CarPlateNumbers;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZonePlateNumberIDChanging(int value);
    partial void OnZonePlateNumberIDChanged();
    partial void OnCityIDChanging(short value);
    partial void OnCityIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    #endregion
		
		public ZonePlateNumber()
		{
			this._CarPlateNumbers = new EntitySet<CarPlateNumber>(new Action<CarPlateNumber>(this.attach_CarPlateNumbers), new Action<CarPlateNumber>(this.detach_CarPlateNumbers));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZonePlateNumberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ZonePlateNumberID
		{
			get
			{
				return this._ZonePlateNumberID;
			}
			set
			{
				if ((this._ZonePlateNumberID != value))
				{
					this.OnZonePlateNumberIDChanging(value);
					this.SendPropertyChanging();
					this._ZonePlateNumberID = value;
					this.SendPropertyChanged("ZonePlateNumberID");
					this.OnZonePlateNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="SmallInt NOT NULL")]
		public short CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_CarPlateNumbers_ZonePlateNumber", Storage="_CarPlateNumbers", ThisKey="ZonePlateNumberID", OtherKey="ZonePlateNumberID", DeleteRule="CASCADE")]
		public EntitySet<CarPlateNumber> CarPlateNumbers
		{
			get
			{
				return this._CarPlateNumbers;
			}
			set
			{
				this._CarPlateNumbers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_ZonePlateNumber_Cities", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.ZonePlateNumbers.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.ZonePlateNumbers.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(short);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CarPlateNumbers(CarPlateNumber entity)
		{
			this.SendPropertyChanging();
			entity.ZonePlateNumber = this;
		}
		
		private void detach_CarPlateNumbers(CarPlateNumber entity)
		{
			this.SendPropertyChanging();
			entity.ZonePlateNumber = null;
		}
	}
}
#pragma warning restore 1591
